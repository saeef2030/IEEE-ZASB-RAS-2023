
KPD_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000029b0  00002a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002148  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f49  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005b21  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 47 06 	call	0xc8e	; 0xc8e <main>
      7a:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab ea       	ldi	r26, 0xAB	; 171
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b ea       	ldi	r24, 0xAB	; 171
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 97 14 	jmp	0x292e	; 0x292e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6b ea       	ldi	r22, 0xAB	; 171
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9f 14 	jmp	0x293e	; 0x293e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <main>:
#define true_pass      "6464"
#define max_try         3
#include <util/delay.h>

int main()
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	c0 54       	subi	r28, 0x40	; 64
     c98:	d0 40       	sbci	r29, 0x00	; 0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8key;
	DIO_voidInit();
     ca4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <DIO_voidInit>
	LCD_voidInit();
     ca8:	0e 94 c4 09 	call	0x1388	; 0x1388 <LCD_voidInit>
    LCD_voidWriteString("Enter Password :");
     cac:	80 e6       	ldi	r24, 0x60	; 96
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a8 ec       	ldi	r26, 0xC8	; 200
     cba:	b2 e4       	ldi	r27, 0x42	; 66
     cbc:	8d ab       	std	Y+53, r24	; 0x35
     cbe:	9e ab       	std	Y+54, r25	; 0x36
     cc0:	af ab       	std	Y+55, r26	; 0x37
     cc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	6d a9       	ldd	r22, Y+53	; 0x35
     cc6:	7e a9       	ldd	r23, Y+54	; 0x36
     cc8:	8f a9       	ldd	r24, Y+55	; 0x37
     cca:	98 ad       	ldd	r25, Y+56	; 0x38
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a ef       	ldi	r20, 0xFA	; 250
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	89 ab       	std	Y+49, r24	; 0x31
     cde:	9a ab       	std	Y+50, r25	; 0x32
     ce0:	ab ab       	std	Y+51, r26	; 0x33
     ce2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ce4:	69 a9       	ldd	r22, Y+49	; 0x31
     ce6:	7a a9       	ldd	r23, Y+50	; 0x32
     ce8:	8b a9       	ldd	r24, Y+51	; 0x33
     cea:	9c a9       	ldd	r25, Y+52	; 0x34
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <main+0x78>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	98 ab       	std	Y+48, r25	; 0x30
     d02:	8f a7       	std	Y+47, r24	; 0x2f
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <main+0xf6>
	else if (__tmp > 65535)
     d06:	69 a9       	ldd	r22, Y+49	; 0x31
     d08:	7a a9       	ldd	r23, Y+50	; 0x32
     d0a:	8b a9       	ldd	r24, Y+51	; 0x33
     d0c:	9c a9       	ldd	r25, Y+52	; 0x34
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <main+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	6d a9       	ldd	r22, Y+53	; 0x35
     d20:	7e a9       	ldd	r23, Y+54	; 0x36
     d22:	8f a9       	ldd	r24, Y+55	; 0x37
     d24:	98 ad       	ldd	r25, Y+56	; 0x38
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	98 ab       	std	Y+48, r25	; 0x30
     d44:	8f a7       	std	Y+47, r24	; 0x2f
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <main+0xd8>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9e a7       	std	Y+46, r25	; 0x2e
     d4e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d50:	8d a5       	ldd	r24, Y+45	; 0x2d
     d52:	9e a5       	ldd	r25, Y+46	; 0x2e
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <main+0xc6>
     d58:	9e a7       	std	Y+46, r25	; 0x2e
     d5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d5e:	98 a9       	ldd	r25, Y+48	; 0x30
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	98 ab       	std	Y+48, r25	; 0x30
     d64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8f a5       	ldd	r24, Y+47	; 0x2f
     d68:	98 a9       	ldd	r25, Y+48	; 0x30
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <main+0xba>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	69 a9       	ldd	r22, Y+49	; 0x31
     d72:	7a a9       	ldd	r23, Y+50	; 0x32
     d74:	8b a9       	ldd	r24, Y+51	; 0x33
     d76:	9c a9       	ldd	r25, Y+52	; 0x34
     d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	98 ab       	std	Y+48, r25	; 0x30
     d82:	8f a7       	std	Y+47, r24	; 0x2f
     d84:	8f a5       	ldd	r24, Y+47	; 0x2f
     d86:	98 a9       	ldd	r25, Y+48	; 0x30
     d88:	9c a7       	std	Y+44, r25	; 0x2c
     d8a:	8b a7       	std	Y+43, r24	; 0x2b
     d8c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d8e:	9c a5       	ldd	r25, Y+44	; 0x2c
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x102>
     d94:	9c a7       	std	Y+44, r25	; 0x2c
     d96:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(100);
    LCD_voidClear();
     d98:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
    LCD_u8GoToXY(1,0);
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_u8GoToXY>
    char enter_pass[pass_count + 1] = {0};
     da4:	85 e0       	ldi	r24, 0x05	; 5
     da6:	fe 01       	movw	r30, r28
     da8:	fc 96       	adiw	r30, 0x3c	; 60
     daa:	df 01       	movw	r26, r30
     dac:	98 2f       	mov	r25, r24
     dae:	1d 92       	st	X+, r1
     db0:	9a 95       	dec	r25
     db2:	e9 f7       	brne	.-6      	; 0xdae <main+0x120>
    u8 Local_u8passIndex = 0;
     db4:	1a ae       	std	Y+58, r1	; 0x3a
    u8 Local_u8trycount=0;
     db6:	19 ae       	std	Y+57, r1	; 0x39
    while (1)
    {

    	KPD_u8GetKeyState(&Local_u8key);
     db8:	ce 01       	movw	r24, r28
     dba:	cb 96       	adiw	r24, 0x3b	; 59
     dbc:	0e 94 b5 08 	call	0x116a	; 0x116a <KPD_u8GetKeyState>
        // key is pressed
        if (Local_u8key != KPD_u8_KEY_NOT_PRESSED )
     dc0:	8b ad       	ldd	r24, Y+59	; 0x3b
     dc2:	8f 3f       	cpi	r24, 0xFF	; 255
     dc4:	c9 f3       	breq	.-14     	; 0xdb8 <main+0x12a>
        {
            // Check valid number key 0 to 9
            if (Local_u8key >= '0' && Local_u8key <= '9')
     dc6:	8b ad       	ldd	r24, Y+59	; 0x3b
     dc8:	80 33       	cpi	r24, 0x30	; 48
     dca:	b0 f3       	brcs	.-20     	; 0xdb8 <main+0x12a>
     dcc:	8b ad       	ldd	r24, Y+59	; 0x3b
     dce:	8a 33       	cpi	r24, 0x3A	; 58
     dd0:	98 f7       	brcc	.-26     	; 0xdb8 <main+0x12a>
            {
            	enter_pass[Local_u8passIndex] = Local_u8key;
     dd2:	8a ad       	ldd	r24, Y+58	; 0x3a
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4b ad       	ldd	r20, Y+59	; 0x3b
     dda:	ce 01       	movw	r24, r28
     ddc:	cc 96       	adiw	r24, 0x3c	; 60
     dde:	fc 01       	movw	r30, r24
     de0:	e2 0f       	add	r30, r18
     de2:	f3 1f       	adc	r31, r19
     de4:	40 83       	st	Z, r20
            	LCD_voidSendChar('#');
     de6:	83 e2       	ldi	r24, 0x23	; 35
     de8:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <LCD_voidSendChar>
                Local_u8passIndex++;
     dec:	8a ad       	ldd	r24, Y+58	; 0x3a
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	8a af       	std	Y+58, r24	; 0x3a
                if (Local_u8passIndex == pass_count)
     df2:	8a ad       	ldd	r24, Y+58	; 0x3a
     df4:	84 30       	cpi	r24, 0x04	; 4
     df6:	01 f7       	brne	.-64     	; 0xdb8 <main+0x12a>
                {
                    if (strcmp(enter_pass, true_pass) == 0)
     df8:	ce 01       	movw	r24, r28
     dfa:	cc 96       	adiw	r24, 0x3c	; 60
     dfc:	21 e7       	ldi	r18, 0x71	; 113
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 cd 14 	call	0x299a	; 0x299a <strcmp>
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	09 f0       	breq	.+2      	; 0xe0c <main+0x17e>
     e0a:	93 c0       	rjmp	.+294    	; 0xf32 <main+0x2a4>
                    {
                    	LCD_voidClear();
     e0c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                    	LCD_voidWriteString("True Password");
     e10:	86 e7       	ldi	r24, 0x76	; 118
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
                    	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN4,DIO_u8_HIGH);
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	64 e0       	ldi	r22, 0x04	; 4
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
                        LCD_voidClear();
     e22:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                        LCD_voidWriteString("DONE PASS True");
     e26:	84 e8       	ldi	r24, 0x84	; 132
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	aa ef       	ldi	r26, 0xFA	; 250
     e34:	b3 e4       	ldi	r27, 0x43	; 67
     e36:	8f a3       	std	Y+39, r24	; 0x27
     e38:	98 a7       	std	Y+40, r25	; 0x28
     e3a:	a9 a7       	std	Y+41, r26	; 0x29
     e3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	6f a1       	ldd	r22, Y+39	; 0x27
     e40:	78 a5       	ldd	r23, Y+40	; 0x28
     e42:	89 a5       	ldd	r24, Y+41	; 0x29
     e44:	9a a5       	ldd	r25, Y+42	; 0x2a
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8b a3       	std	Y+35, r24	; 0x23
     e58:	9c a3       	std	Y+36, r25	; 0x24
     e5a:	ad a3       	std	Y+37, r26	; 0x25
     e5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e5e:	6b a1       	ldd	r22, Y+35	; 0x23
     e60:	7c a1       	ldd	r23, Y+36	; 0x24
     e62:	8d a1       	ldd	r24, Y+37	; 0x25
     e64:	9e a1       	ldd	r25, Y+38	; 0x26
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <main+0x1f2>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9a a3       	std	Y+34, r25	; 0x22
     e7c:	89 a3       	std	Y+33, r24	; 0x21
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <main+0x270>
	else if (__tmp > 65535)
     e80:	6b a1       	ldd	r22, Y+35	; 0x23
     e82:	7c a1       	ldd	r23, Y+36	; 0x24
     e84:	8d a1       	ldd	r24, Y+37	; 0x25
     e86:	9e a1       	ldd	r25, Y+38	; 0x26
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <main+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	6f a1       	ldd	r22, Y+39	; 0x27
     e9a:	78 a5       	ldd	r23, Y+40	; 0x28
     e9c:	89 a5       	ldd	r24, Y+41	; 0x29
     e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9a a3       	std	Y+34, r25	; 0x22
     ebe:	89 a3       	std	Y+33, r24	; 0x21
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <main+0x252>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	98 a3       	std	Y+32, r25	; 0x20
     ec8:	8f 8f       	std	Y+31, r24	; 0x1f
     eca:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ecc:	98 a1       	ldd	r25, Y+32	; 0x20
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <main+0x240>
     ed2:	98 a3       	std	Y+32, r25	; 0x20
     ed4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	89 a1       	ldd	r24, Y+33	; 0x21
     ed8:	9a a1       	ldd	r25, Y+34	; 0x22
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9a a3       	std	Y+34, r25	; 0x22
     ede:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	89 a1       	ldd	r24, Y+33	; 0x21
     ee2:	9a a1       	ldd	r25, Y+34	; 0x22
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <main+0x234>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <main+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6b a1       	ldd	r22, Y+35	; 0x23
     eec:	7c a1       	ldd	r23, Y+36	; 0x24
     eee:	8d a1       	ldd	r24, Y+37	; 0x25
     ef0:	9e a1       	ldd	r25, Y+38	; 0x26
     ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9a a3       	std	Y+34, r25	; 0x22
     efc:	89 a3       	std	Y+33, r24	; 0x21
     efe:	89 a1       	ldd	r24, Y+33	; 0x21
     f00:	9a a1       	ldd	r25, Y+34	; 0x22
     f02:	9e 8f       	std	Y+30, r25	; 0x1e
     f04:	8d 8f       	std	Y+29, r24	; 0x1d
     f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <main+0x27c>
     f0e:	9e 8f       	std	Y+30, r25	; 0x1e
     f10:	8d 8f       	std	Y+29, r24	; 0x1d
                        _delay_ms(500);
                        DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN4,DIO_u8_LOW);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
                        Local_u8trycount=0;
     f1c:	19 ae       	std	Y+57, r1	; 0x39
                        Local_u8passIndex = 0;
     f1e:	1a ae       	std	Y+58, r1	; 0x3a
                        memset(enter_pass, 0 , pass_count + 1);
     f20:	ce 01       	movw	r24, r28
     f22:	cc 96       	adiw	r24, 0x3c	; 60
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	45 e0       	ldi	r20, 0x05	; 5
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	0e 94 c6 14 	call	0x298c	; 0x298c <memset>
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <main+0x2d0>
                    }
                    else
                    {
                    	LCD_voidClear();
     f32:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                        LCD_u8GoToXY(1,0);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_u8GoToXY>
                        LCD_voidWriteString(" Wrong Password ");
     f3e:	83 e9       	ldi	r24, 0x93	; 147
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
                    	Local_u8trycount++;
     f46:	89 ad       	ldd	r24, Y+57	; 0x39
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	89 af       	std	Y+57, r24	; 0x39
                    	Local_u8passIndex = 0;
     f4c:	1a ae       	std	Y+58, r1	; 0x3a
                        memset(enter_pass, 0 , pass_count + 1);
     f4e:	ce 01       	movw	r24, r28
     f50:	cc 96       	adiw	r24, 0x3c	; 60
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	45 e0       	ldi	r20, 0x05	; 5
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	0e 94 c6 14 	call	0x298c	; 0x298c <memset>
                    }
                	if(Local_u8trycount >= max_try)
     f5e:	89 ad       	ldd	r24, Y+57	; 0x39
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	90 f0       	brcs	.+36     	; 0xf88 <main+0x2fa>
                	{
                		LCD_voidClear();
     f64:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                    	LCD_voidWriteString("LOCKED");
     f68:	84 ea       	ldi	r24, 0xA4	; 164
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
                }
            }
        }
    }

    return 0;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
}
     f74:	c0 5c       	subi	r28, 0xC0	; 192
     f76:	df 4f       	sbci	r29, 0xFF	; 255
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret
                }
            }
        }
    }

    return 0;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	aa ef       	ldi	r26, 0xFA	; 250
     f8e:	b3 e4       	ldi	r27, 0x43	; 67
     f90:	89 8f       	std	Y+25, r24	; 0x19
     f92:	9a 8f       	std	Y+26, r25	; 0x1a
     f94:	ab 8f       	std	Y+27, r26	; 0x1b
     f96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f98:	69 8d       	ldd	r22, Y+25	; 0x19
     f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	4a ef       	ldi	r20, 0xFA	; 250
     fa6:	54 e4       	ldi	r21, 0x44	; 68
     fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8d 8b       	std	Y+21, r24	; 0x15
     fb2:	9e 8b       	std	Y+22, r25	; 0x16
     fb4:	af 8b       	std	Y+23, r26	; 0x17
     fb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb8:	6d 89       	ldd	r22, Y+21	; 0x15
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5f e3       	ldi	r21, 0x3F	; 63
     fc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fcc:	88 23       	and	r24, r24
     fce:	2c f4       	brge	.+10     	; 0xfda <main+0x34c>
		__ticks = 1;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	9c 8b       	std	Y+20, r25	; 0x14
     fd6:	8b 8b       	std	Y+19, r24	; 0x13
     fd8:	3f c0       	rjmp	.+126    	; 0x1058 <main+0x3ca>
	else if (__tmp > 65535)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	3f ef       	ldi	r19, 0xFF	; 255
     fe6:	4f e7       	ldi	r20, 0x7F	; 127
     fe8:	57 e4       	ldi	r21, 0x47	; 71
     fea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fee:	18 16       	cp	r1, r24
     ff0:	4c f5       	brge	.+82     	; 0x1044 <main+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff2:	69 8d       	ldd	r22, Y+25	; 0x19
     ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e2       	ldi	r20, 0x20	; 32
    1000:	51 e4       	ldi	r21, 0x41	; 65
    1002:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	bc 01       	movw	r22, r24
    100c:	cd 01       	movw	r24, r26
    100e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	9c 8b       	std	Y+20, r25	; 0x14
    1018:	8b 8b       	std	Y+19, r24	; 0x13
    101a:	0f c0       	rjmp	.+30     	; 0x103a <main+0x3ac>
    101c:	88 ec       	ldi	r24, 0xC8	; 200
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	9a 8b       	std	Y+18, r25	; 0x12
    1022:	89 8b       	std	Y+17, r24	; 0x11
    1024:	89 89       	ldd	r24, Y+17	; 0x11
    1026:	9a 89       	ldd	r25, Y+18	; 0x12
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <main+0x39a>
    102c:	9a 8b       	std	Y+18, r25	; 0x12
    102e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1030:	8b 89       	ldd	r24, Y+19	; 0x13
    1032:	9c 89       	ldd	r25, Y+20	; 0x14
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 8b       	std	Y+20, r25	; 0x14
    1038:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103a:	8b 89       	ldd	r24, Y+19	; 0x13
    103c:	9c 89       	ldd	r25, Y+20	; 0x14
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f7       	brne	.-38     	; 0x101c <main+0x38e>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <main+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	98 8b       	std	Y+16, r25	; 0x10
    105e:	8f 87       	std	Y+15, r24	; 0x0f
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f7       	brne	.-4      	; 0x1064 <main+0x3d6>
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	8f 87       	std	Y+15, r24	; 0x0f
                		LCD_voidClear();
                    	LCD_voidWriteString("LOCKED");
                		break;
                	}
                	_delay_ms(500);
                    LCD_voidClear();
    106c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                    LCD_voidWriteString("Enter Password :");
    1070:	80 e6       	ldi	r24, 0x60	; 96
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD_voidWriteString>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	aa ef       	ldi	r26, 0xFA	; 250
    107e:	b3 e4       	ldi	r27, 0x43	; 67
    1080:	8b 87       	std	Y+11, r24	; 0x0b
    1082:	9c 87       	std	Y+12, r25	; 0x0c
    1084:	ad 87       	std	Y+13, r26	; 0x0d
    1086:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1088:	6b 85       	ldd	r22, Y+11	; 0x0b
    108a:	7c 85       	ldd	r23, Y+12	; 0x0c
    108c:	8d 85       	ldd	r24, Y+13	; 0x0d
    108e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	4a ef       	ldi	r20, 0xFA	; 250
    1096:	54 e4       	ldi	r21, 0x44	; 68
    1098:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	8f 83       	std	Y+7, r24	; 0x07
    10a2:	98 87       	std	Y+8, r25	; 0x08
    10a4:	a9 87       	std	Y+9, r26	; 0x09
    10a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10a8:	6f 81       	ldd	r22, Y+7	; 0x07
    10aa:	78 85       	ldd	r23, Y+8	; 0x08
    10ac:	89 85       	ldd	r24, Y+9	; 0x09
    10ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e8       	ldi	r20, 0x80	; 128
    10b6:	5f e3       	ldi	r21, 0x3F	; 63
    10b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    10bc:	88 23       	and	r24, r24
    10be:	2c f4       	brge	.+10     	; 0x10ca <main+0x43c>
		__ticks = 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9e 83       	std	Y+6, r25	; 0x06
    10c6:	8d 83       	std	Y+5, r24	; 0x05
    10c8:	3f c0       	rjmp	.+126    	; 0x1148 <main+0x4ba>
	else if (__tmp > 65535)
    10ca:	6f 81       	ldd	r22, Y+7	; 0x07
    10cc:	78 85       	ldd	r23, Y+8	; 0x08
    10ce:	89 85       	ldd	r24, Y+9	; 0x09
    10d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	57 e4       	ldi	r21, 0x47	; 71
    10da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    10de:	18 16       	cp	r1, r24
    10e0:	4c f5       	brge	.+82     	; 0x1134 <main+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	0f c0       	rjmp	.+30     	; 0x112a <main+0x49c>
    110c:	88 ec       	ldi	r24, 0xC8	; 200
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <main+0x48a>
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	8d 81       	ldd	r24, Y+5	; 0x05
    112c:	9e 81       	ldd	r25, Y+6	; 0x06
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	69 f7       	brne	.-38     	; 0x110c <main+0x47e>
    1132:	14 c0       	rjmp	.+40     	; 0x115c <main+0x4ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	6f 81       	ldd	r22, Y+7	; 0x07
    1136:	78 85       	ldd	r23, Y+8	; 0x08
    1138:	89 85       	ldd	r24, Y+9	; 0x09
    113a:	9a 85       	ldd	r25, Y+10	; 0x0a
    113c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	9e 83       	std	Y+6, r25	; 0x06
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	9a 83       	std	Y+2, r25	; 0x02
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <main+0x4c6>
    1158:	9a 83       	std	Y+2, r25	; 0x02
    115a:	89 83       	std	Y+1, r24	; 0x01
                    _delay_ms(500);
                    LCD_voidClear();
    115c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <LCD_voidClear>
                    LCD_u8GoToXY(1,0);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_u8GoToXY>
    1168:	27 ce       	rjmp	.-946    	; 0xdb8 <main+0x12a>

0000116a <KPD_u8GetKeyState>:

const u8 KPD_Au8RowsPins[4]={ KPD_u8_R1_PIN , KPD_u8_R2_PIN , KPD_u8_R3_PIN , KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={ KPD_u8_C1_PIN , KPD_u8_C2_PIN , KPD_u8_C3_PIN , KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	65 97       	sbiw	r28, 0x15	; 21
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	9d 8b       	std	Y+21, r25	; 0x15
    1180:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter , Local_u8ColsCounter , Local_u8PinValue , Local_u8Flag = 0;
    1186:	1f 86       	std	Y+15, r1	; 0x0f
	if( Copy_pu8ReturnedKey != NULL)
    1188:	8c 89       	ldd	r24, Y+20	; 0x14
    118a:	9d 89       	ldd	r25, Y+21	; 0x15
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	09 f4       	brne	.+2      	; 0x1192 <KPD_u8GetKeyState+0x28>
    1190:	f0 c0       	rjmp	.+480    	; 0x1372 <KPD_u8GetKeyState+0x208>
	{ *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1192:	ec 89       	ldd	r30, Y+20	; 0x14
    1194:	fd 89       	ldd	r31, Y+21	; 0x15
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	80 83       	st	Z, r24
		/* Active Each Row by Using For Loop on the Pins of the Rows*/
		for(Local_u8RowsCounter = 0 ; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    119a:	19 8a       	std	Y+17, r1	; 0x11
    119c:	e5 c0       	rjmp	.+458    	; 0x1368 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT , KPD_Au8RowsPins[Local_u8RowsCounter] , DIO_u8_LOW);
    119e:	89 89       	ldd	r24, Y+17	; 0x11
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	fc 01       	movw	r30, r24
    11a6:	ed 53       	subi	r30, 0x3D	; 61
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	90 81       	ld	r25, Z
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	69 2f       	mov	r22, r25
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
			/* check which input pin has zero value*/
			for(Local_u8ColsCounter = 0 ; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    11b6:	18 8a       	std	Y+16, r1	; 0x10
    11b8:	c1 c0       	rjmp	.+386    	; 0x133c <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8PinValue);
    11ba:	88 89       	ldd	r24, Y+16	; 0x10
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	fc 01       	movw	r30, r24
    11c2:	e9 53       	subi	r30, 0x39	; 57
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	90 81       	ld	r25, Z
    11c8:	9e 01       	movw	r18, r28
    11ca:	2d 5e       	subi	r18, 0xED	; 237
    11cc:	3f 4f       	sbci	r19, 0xFF	; 255
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	69 2f       	mov	r22, r25
    11d2:	a9 01       	movw	r20, r18
    11d4:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <DIO_u8GetPinValue>
				if (Local_u8PinValue == DIO_u8_LOW)/* Switch is pressed */
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	88 23       	and	r24, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <KPD_u8GetKeyState+0x76>
    11de:	ab c0       	rjmp	.+342    	; 0x1336 <KPD_u8GetKeyState+0x1cc>
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a0 ea       	ldi	r26, 0xA0	; 160
    11e6:	b1 e4       	ldi	r27, 0x41	; 65
    11e8:	8b 87       	std	Y+11, r24	; 0x0b
    11ea:	9c 87       	std	Y+12, r25	; 0x0c
    11ec:	ad 87       	std	Y+13, r26	; 0x0d
    11ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	4a ef       	ldi	r20, 0xFA	; 250
    11fe:	54 e4       	ldi	r21, 0x44	; 68
    1200:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	8f 83       	std	Y+7, r24	; 0x07
    120a:	98 87       	std	Y+8, r25	; 0x08
    120c:	a9 87       	std	Y+9, r26	; 0x09
    120e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1210:	6f 81       	ldd	r22, Y+7	; 0x07
    1212:	78 85       	ldd	r23, Y+8	; 0x08
    1214:	89 85       	ldd	r24, Y+9	; 0x09
    1216:	9a 85       	ldd	r25, Y+10	; 0x0a
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1224:	88 23       	and	r24, r24
    1226:	2c f4       	brge	.+10     	; 0x1232 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	3f c0       	rjmp	.+126    	; 0x12b0 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1232:	6f 81       	ldd	r22, Y+7	; 0x07
    1234:	78 85       	ldd	r23, Y+8	; 0x08
    1236:	89 85       	ldd	r24, Y+9	; 0x09
    1238:	9a 85       	ldd	r25, Y+10	; 0x0a
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	3f ef       	ldi	r19, 0xFF	; 255
    123e:	4f e7       	ldi	r20, 0x7F	; 127
    1240:	57 e4       	ldi	r21, 0x47	; 71
    1242:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1246:	18 16       	cp	r1, r24
    1248:	4c f5       	brge	.+82     	; 0x129c <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124a:	6b 85       	ldd	r22, Y+11	; 0x0b
    124c:	7c 85       	ldd	r23, Y+12	; 0x0c
    124e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1250:	9e 85       	ldd	r25, Y+14	; 0x0e
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e2       	ldi	r20, 0x20	; 32
    1258:	51 e4       	ldi	r21, 0x41	; 65
    125a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	9e 83       	std	Y+6, r25	; 0x06
    1270:	8d 83       	std	Y+5, r24	; 0x05
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <KPD_u8GetKeyState+0x128>
    1274:	88 ec       	ldi	r24, 0xC8	; 200
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 83       	std	Y+4, r25	; 0x04
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <KPD_u8GetKeyState+0x116>
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9e 83       	std	Y+6, r25	; 0x06
    1290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	69 f7       	brne	.-38     	; 0x1274 <KPD_u8GetKeyState+0x10a>
    129a:	14 c0       	rjmp	.+40     	; 0x12c4 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <KPD_u8GetKeyState+0x152>
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8PinValue);
    12c4:	88 89       	ldd	r24, Y+16	; 0x10
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	fc 01       	movw	r30, r24
    12cc:	e9 53       	subi	r30, 0x39	; 57
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	90 81       	ld	r25, Z
    12d2:	9e 01       	movw	r18, r28
    12d4:	2d 5e       	subi	r18, 0xED	; 237
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	69 2f       	mov	r22, r25
    12dc:	a9 01       	movw	r20, r18
    12de:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <DIO_u8GetPinValue>
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <KPD_u8GetKeyState+0x198>
					/* check if the pin  is still eaual Low*/
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8PinValue);
    12e4:	88 89       	ldd	r24, Y+16	; 0x10
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	fc 01       	movw	r30, r24
    12ec:	e9 53       	subi	r30, 0x39	; 57
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	90 81       	ld	r25, Z
    12f2:	9e 01       	movw	r18, r28
    12f4:	2d 5e       	subi	r18, 0xED	; 237
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	69 2f       	mov	r22, r25
    12fc:	a9 01       	movw	r20, r18
    12fe:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8PinValue);
					/* check if the pin  is still eaual Low*/
					while(Local_u8PinValue == DIO_u8_LOW)
    1302:	8b 89       	ldd	r24, Y+19	; 0x13
    1304:	88 23       	and	r24, r24
    1306:	71 f3       	breq	.-36     	; 0x12e4 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT , KPD_Au8ColsPins[Local_u8ColsCounter] , &Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	48 2f       	mov	r20, r24
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	88 89       	ldd	r24, Y+16	; 0x10
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	ca 01       	movw	r24, r20
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	fc 01       	movw	r30, r24
    1324:	ed 54       	subi	r30, 0x4D	; 77
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 81       	ld	r24, Z
    132a:	ec 89       	ldd	r30, Y+20	; 0x14
    132c:	fd 89       	ldd	r31, Y+21	; 0x15
    132e:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8f 87       	std	Y+15, r24	; 0x0f
    1334:	07 c0       	rjmp	.+14     	; 0x1344 <KPD_u8GetKeyState+0x1da>
		/* Active Each Row by Using For Loop on the Pins of the Rows*/
		for(Local_u8RowsCounter = 0 ; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_u8_PORT , KPD_Au8RowsPins[Local_u8RowsCounter] , DIO_u8_LOW);
			/* check which input pin has zero value*/
			for(Local_u8ColsCounter = 0 ; Local_u8ColsCounter <= 3 ; Local_u8ColsCounter++)
    1336:	88 89       	ldd	r24, Y+16	; 0x10
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	88 8b       	std	Y+16, r24	; 0x10
    133c:	88 89       	ldd	r24, Y+16	; 0x10
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	08 f4       	brcc	.+2      	; 0x1344 <KPD_u8GetKeyState+0x1da>
    1342:	3b cf       	rjmp	.-394    	; 0x11ba <KPD_u8GetKeyState+0x50>
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					Local_u8Flag = 1;
					break;	
				}	
			}
			DIO_u8SetPinValue(KPD_u8_PORT , KPD_Au8RowsPins[Local_u8RowsCounter] , DIO_u8_HIGH);
    1344:	89 89       	ldd	r24, Y+17	; 0x11
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	fc 01       	movw	r30, r24
    134c:	ed 53       	subi	r30, 0x3D	; 61
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	90 81       	ld	r25, Z
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	69 2f       	mov	r22, r25
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    135c:	8f 85       	ldd	r24, Y+15	; 0x0f
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	49 f0       	breq	.+18     	; 0x1374 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter , Local_u8ColsCounter , Local_u8PinValue , Local_u8Flag = 0;
	if( Copy_pu8ReturnedKey != NULL)
	{ *Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Active Each Row by Using For Loop on the Pins of the Rows*/
		for(Local_u8RowsCounter = 0 ; Local_u8RowsCounter <= 3 ; Local_u8RowsCounter++)
    1362:	89 89       	ldd	r24, Y+17	; 0x11
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	89 8b       	std	Y+17, r24	; 0x11
    1368:	89 89       	ldd	r24, Y+17	; 0x11
    136a:	84 30       	cpi	r24, 0x04	; 4
    136c:	08 f4       	brcc	.+2      	; 0x1370 <KPD_u8GetKeyState+0x206>
    136e:	17 cf       	rjmp	.-466    	; 0x119e <KPD_u8GetKeyState+0x34>
    1370:	01 c0       	rjmp	.+2      	; 0x1374 <KPD_u8GetKeyState+0x20a>
			}
		}	
	}
	else
	{
	 	Local_u8ErrorState = STD_TYPES_NOK;
    1372:	1a 8a       	std	Y+18, r1	; 0x12
	}
	return Local_u8ErrorState;
    1374:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1376:	65 96       	adiw	r28, 0x15	; 21
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <LCD_voidInit>:
       /*HAL Layer*/
#include"LCD_interface.h"
#include"LCD_private.h"
#include"LCD_config.h"

void LCD_voidInit(void){
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	cc 54       	subi	r28, 0x4C	; 76
    1396:	d0 40       	sbci	r29, 0x00	; 0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	fe 01       	movw	r30, r28
    13a4:	e7 5b       	subi	r30, 0xB7	; 183
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	ac e0       	ldi	r26, 0x0C	; 12
    13ae:	b2 e4       	ldi	r27, 0x42	; 66
    13b0:	80 83       	st	Z, r24
    13b2:	91 83       	std	Z+1, r25	; 0x01
    13b4:	a2 83       	std	Z+2, r26	; 0x02
    13b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	8e 01       	movw	r16, r28
    13ba:	0b 5b       	subi	r16, 0xBB	; 187
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	fe 01       	movw	r30, r28
    13c0:	e7 5b       	subi	r30, 0xB7	; 183
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	93 81       	ldd	r25, Z+3	; 0x03
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4a ef       	ldi	r20, 0xFA	; 250
    13d2:	54 e4       	ldi	r21, 0x44	; 68
    13d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	f8 01       	movw	r30, r16
    13de:	80 83       	st	Z, r24
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13e6:	fe 01       	movw	r30, r28
    13e8:	eb 5b       	subi	r30, 0xBB	; 187
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	44 f4       	brge	.+16     	; 0x1414 <LCD_voidInit+0x8c>
		__ticks = 1;
    1404:	fe 01       	movw	r30, r28
    1406:	ed 5b       	subi	r30, 0xBD	; 189
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	91 83       	std	Z+1, r25	; 0x01
    1410:	80 83       	st	Z, r24
    1412:	64 c0       	rjmp	.+200    	; 0x14dc <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1414:	fe 01       	movw	r30, r28
    1416:	eb 5b       	subi	r30, 0xBB	; 187
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	0c f0       	brlt	.+2      	; 0x1434 <LCD_voidInit+0xac>
    1432:	43 c0       	rjmp	.+134    	; 0x14ba <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1434:	fe 01       	movw	r30, r28
    1436:	e7 5b       	subi	r30, 0xB7	; 183
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e2       	ldi	r20, 0x20	; 32
    1448:	51 e4       	ldi	r21, 0x41	; 65
    144a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8e 01       	movw	r16, r28
    1454:	0d 5b       	subi	r16, 0xBD	; 189
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	bc 01       	movw	r22, r24
    145a:	cd 01       	movw	r24, r26
    145c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	f8 01       	movw	r30, r16
    1466:	91 83       	std	Z+1, r25	; 0x01
    1468:	80 83       	st	Z, r24
    146a:	1f c0       	rjmp	.+62     	; 0x14aa <LCD_voidInit+0x122>
    146c:	fe 01       	movw	r30, r28
    146e:	ef 5b       	subi	r30, 0xBF	; 191
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    147a:	fe 01       	movw	r30, r28
    147c:	ef 5b       	subi	r30, 0xBF	; 191
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_voidInit+0xfc>
    1488:	fe 01       	movw	r30, r28
    148a:	ef 5b       	subi	r30, 0xBF	; 191
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	91 83       	std	Z+1, r25	; 0x01
    1490:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1492:	de 01       	movw	r26, r28
    1494:	ad 5b       	subi	r26, 0xBD	; 189
    1496:	bf 4f       	sbci	r27, 0xFF	; 255
    1498:	fe 01       	movw	r30, r28
    149a:	ed 5b       	subi	r30, 0xBD	; 189
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 81       	ld	r24, Z
    14a0:	91 81       	ldd	r25, Z+1	; 0x01
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	9c 93       	st	X, r25
    14a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	fe 01       	movw	r30, r28
    14ac:	ed 5b       	subi	r30, 0xBD	; 189
    14ae:	ff 4f       	sbci	r31, 0xFF	; 255
    14b0:	80 81       	ld	r24, Z
    14b2:	91 81       	ldd	r25, Z+1	; 0x01
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	d1 f6       	brne	.-76     	; 0x146c <LCD_voidInit+0xe4>
    14b8:	24 c0       	rjmp	.+72     	; 0x1502 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ba:	8e 01       	movw	r16, r28
    14bc:	0d 5b       	subi	r16, 0xBD	; 189
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	fe 01       	movw	r30, r28
    14c2:	eb 5b       	subi	r30, 0xBB	; 187
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	fe 01       	movw	r30, r28
    14de:	ed 5b       	subi	r30, 0xBD	; 189
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	fe 01       	movw	r30, r28
    14e8:	ff 96       	adiw	r30, 0x3f	; 63
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	80 83       	st	Z, r24
    14ee:	fe 01       	movw	r30, r28
    14f0:	ff 96       	adiw	r30, 0x3f	; 63
    14f2:	80 81       	ld	r24, Z
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <LCD_voidInit+0x16e>
    14fa:	fe 01       	movw	r30, r28
    14fc:	ff 96       	adiw	r30, 0x3f	; 63
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
 #if LCD_u8_MODE == LCD_u8_MODE_8_BITS
    /* 8 bit mode initialization */ 
	_delay_ms(35);
	/*Function send comnd */
	LCD_voidSendCmnd(0b00111000);
    1502:	88 e3       	ldi	r24, 0x38	; 56
    1504:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e2       	ldi	r26, 0x20	; 32
    150e:	b2 e4       	ldi	r27, 0x42	; 66
    1510:	8b af       	std	Y+59, r24	; 0x3b
    1512:	9c af       	std	Y+60, r25	; 0x3c
    1514:	ad af       	std	Y+61, r26	; 0x3d
    1516:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1518:	6b ad       	ldd	r22, Y+59	; 0x3b
    151a:	7c ad       	ldd	r23, Y+60	; 0x3c
    151c:	8d ad       	ldd	r24, Y+61	; 0x3d
    151e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1520:	2b ea       	ldi	r18, 0xAB	; 171
    1522:	3a ea       	ldi	r19, 0xAA	; 170
    1524:	4a e2       	ldi	r20, 0x2A	; 42
    1526:	50 e4       	ldi	r21, 0x40	; 64
    1528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8f ab       	std	Y+55, r24	; 0x37
    1532:	98 af       	std	Y+56, r25	; 0x38
    1534:	a9 af       	std	Y+57, r26	; 0x39
    1536:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1538:	6f a9       	ldd	r22, Y+55	; 0x37
    153a:	78 ad       	ldd	r23, Y+56	; 0x38
    153c:	89 ad       	ldd	r24, Y+57	; 0x39
    153e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	1c f4       	brge	.+6      	; 0x1556 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	8e ab       	std	Y+54, r24	; 0x36
    1554:	91 c0       	rjmp	.+290    	; 0x1678 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1556:	6f a9       	ldd	r22, Y+55	; 0x37
    1558:	78 ad       	ldd	r23, Y+56	; 0x38
    155a:	89 ad       	ldd	r24, Y+57	; 0x39
    155c:	9a ad       	ldd	r25, Y+58	; 0x3a
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	4f e7       	ldi	r20, 0x7F	; 127
    1564:	53 e4       	ldi	r21, 0x43	; 67
    1566:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156a:	18 16       	cp	r1, r24
    156c:	0c f0       	brlt	.+2      	; 0x1570 <LCD_voidInit+0x1e8>
    156e:	7b c0       	rjmp	.+246    	; 0x1666 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1570:	6b ad       	ldd	r22, Y+59	; 0x3b
    1572:	7c ad       	ldd	r23, Y+60	; 0x3c
    1574:	8d ad       	ldd	r24, Y+61	; 0x3d
    1576:	9e ad       	ldd	r25, Y+62	; 0x3e
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a e7       	ldi	r20, 0x7A	; 122
    157e:	54 e4       	ldi	r21, 0x44	; 68
    1580:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	8a ab       	std	Y+50, r24	; 0x32
    158a:	9b ab       	std	Y+51, r25	; 0x33
    158c:	ac ab       	std	Y+52, r26	; 0x34
    158e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1590:	6a a9       	ldd	r22, Y+50	; 0x32
    1592:	7b a9       	ldd	r23, Y+51	; 0x33
    1594:	8c a9       	ldd	r24, Y+52	; 0x34
    1596:	9d a9       	ldd	r25, Y+53	; 0x35
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8e a7       	std	Y+46, r24	; 0x2e
    15aa:	9f a7       	std	Y+47, r25	; 0x2f
    15ac:	a8 ab       	std	Y+48, r26	; 0x30
    15ae:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    15b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    15b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    15b4:	88 a9       	ldd	r24, Y+48	; 0x30
    15b6:	99 a9       	ldd	r25, Y+49	; 0x31
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15c4:	88 23       	and	r24, r24
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <LCD_voidInit+0x24a>
		__ticks = 1;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	9d a7       	std	Y+45, r25	; 0x2d
    15ce:	8c a7       	std	Y+44, r24	; 0x2c
    15d0:	3f c0       	rjmp	.+126    	; 0x1650 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    15d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    15d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    15d6:	88 a9       	ldd	r24, Y+48	; 0x30
    15d8:	99 a9       	ldd	r25, Y+49	; 0x31
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	3f ef       	ldi	r19, 0xFF	; 255
    15de:	4f e7       	ldi	r20, 0x7F	; 127
    15e0:	57 e4       	ldi	r21, 0x47	; 71
    15e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	4c f5       	brge	.+82     	; 0x163c <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ea:	6a a9       	ldd	r22, Y+50	; 0x32
    15ec:	7b a9       	ldd	r23, Y+51	; 0x33
    15ee:	8c a9       	ldd	r24, Y+52	; 0x34
    15f0:	9d a9       	ldd	r25, Y+53	; 0x35
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	bc 01       	movw	r22, r24
    1604:	cd 01       	movw	r24, r26
    1606:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	9d a7       	std	Y+45, r25	; 0x2d
    1610:	8c a7       	std	Y+44, r24	; 0x2c
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <LCD_voidInit+0x2aa>
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9b a7       	std	Y+43, r25	; 0x2b
    161a:	8a a7       	std	Y+42, r24	; 0x2a
    161c:	8a a5       	ldd	r24, Y+42	; 0x2a
    161e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <LCD_voidInit+0x298>
    1624:	9b a7       	std	Y+43, r25	; 0x2b
    1626:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1628:	8c a5       	ldd	r24, Y+44	; 0x2c
    162a:	9d a5       	ldd	r25, Y+45	; 0x2d
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	9d a7       	std	Y+45, r25	; 0x2d
    1630:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1632:	8c a5       	ldd	r24, Y+44	; 0x2c
    1634:	9d a5       	ldd	r25, Y+45	; 0x2d
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	69 f7       	brne	.-38     	; 0x1614 <LCD_voidInit+0x28c>
    163a:	24 c0       	rjmp	.+72     	; 0x1684 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163c:	6e a5       	ldd	r22, Y+46	; 0x2e
    163e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1640:	88 a9       	ldd	r24, Y+48	; 0x30
    1642:	99 a9       	ldd	r25, Y+49	; 0x31
    1644:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	9d a7       	std	Y+45, r25	; 0x2d
    164e:	8c a7       	std	Y+44, r24	; 0x2c
    1650:	8c a5       	ldd	r24, Y+44	; 0x2c
    1652:	9d a5       	ldd	r25, Y+45	; 0x2d
    1654:	99 a7       	std	Y+41, r25	; 0x29
    1656:	88 a7       	std	Y+40, r24	; 0x28
    1658:	88 a5       	ldd	r24, Y+40	; 0x28
    165a:	99 a5       	ldd	r25, Y+41	; 0x29
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <LCD_voidInit+0x2d4>
    1660:	99 a7       	std	Y+41, r25	; 0x29
    1662:	88 a7       	std	Y+40, r24	; 0x28
    1664:	0f c0       	rjmp	.+30     	; 0x1684 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1666:	6f a9       	ldd	r22, Y+55	; 0x37
    1668:	78 ad       	ldd	r23, Y+56	; 0x38
    166a:	89 ad       	ldd	r24, Y+57	; 0x39
    166c:	9a ad       	ldd	r25, Y+58	; 0x3a
    166e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8e ab       	std	Y+54, r24	; 0x36
    1678:	8e a9       	ldd	r24, Y+54	; 0x36
    167a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    167c:	8f a1       	ldd	r24, Y+39	; 0x27
    167e:	8a 95       	dec	r24
    1680:	f1 f7       	brne	.-4      	; 0x167e <LCD_voidInit+0x2f6>
    1682:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*Display On/Off Control*/
	LCD_voidSendCmnd(0b00001111);
    1684:	8f e0       	ldi	r24, 0x0F	; 15
    1686:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e2       	ldi	r26, 0x20	; 32
    1690:	b2 e4       	ldi	r27, 0x42	; 66
    1692:	8b a3       	std	Y+35, r24	; 0x23
    1694:	9c a3       	std	Y+36, r25	; 0x24
    1696:	ad a3       	std	Y+37, r26	; 0x25
    1698:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    169a:	6b a1       	ldd	r22, Y+35	; 0x23
    169c:	7c a1       	ldd	r23, Y+36	; 0x24
    169e:	8d a1       	ldd	r24, Y+37	; 0x25
    16a0:	9e a1       	ldd	r25, Y+38	; 0x26
    16a2:	2b ea       	ldi	r18, 0xAB	; 171
    16a4:	3a ea       	ldi	r19, 0xAA	; 170
    16a6:	4a e2       	ldi	r20, 0x2A	; 42
    16a8:	50 e4       	ldi	r21, 0x40	; 64
    16aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	8f 8f       	std	Y+31, r24	; 0x1f
    16b4:	98 a3       	std	Y+32, r25	; 0x20
    16b6:	a9 a3       	std	Y+33, r26	; 0x21
    16b8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    16ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16bc:	78 a1       	ldd	r23, Y+32	; 0x20
    16be:	89 a1       	ldd	r24, Y+33	; 0x21
    16c0:	9a a1       	ldd	r25, Y+34	; 0x22
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e8       	ldi	r20, 0x80	; 128
    16c8:	5f e3       	ldi	r21, 0x3F	; 63
    16ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16ce:	88 23       	and	r24, r24
    16d0:	1c f4       	brge	.+6      	; 0x16d8 <LCD_voidInit+0x350>
		__ticks = 1;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	8e 8f       	std	Y+30, r24	; 0x1e
    16d6:	91 c0       	rjmp	.+290    	; 0x17fa <LCD_voidInit+0x472>
	else if (__tmp > 255)
    16d8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16da:	78 a1       	ldd	r23, Y+32	; 0x20
    16dc:	89 a1       	ldd	r24, Y+33	; 0x21
    16de:	9a a1       	ldd	r25, Y+34	; 0x22
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <LCD_voidInit+0x36a>
    16f0:	7b c0       	rjmp	.+246    	; 0x17e8 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    16f2:	6b a1       	ldd	r22, Y+35	; 0x23
    16f4:	7c a1       	ldd	r23, Y+36	; 0x24
    16f6:	8d a1       	ldd	r24, Y+37	; 0x25
    16f8:	9e a1       	ldd	r25, Y+38	; 0x26
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4a e7       	ldi	r20, 0x7A	; 122
    1700:	54 e4       	ldi	r21, 0x44	; 68
    1702:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	8a 8f       	std	Y+26, r24	; 0x1a
    170c:	9b 8f       	std	Y+27, r25	; 0x1b
    170e:	ac 8f       	std	Y+28, r26	; 0x1c
    1710:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1714:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1716:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1718:	9d 8d       	ldd	r25, Y+29	; 0x1d
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a ef       	ldi	r20, 0xFA	; 250
    1720:	54 e4       	ldi	r21, 0x44	; 68
    1722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	8e 8b       	std	Y+22, r24	; 0x16
    172c:	9f 8b       	std	Y+23, r25	; 0x17
    172e:	a8 8f       	std	Y+24, r26	; 0x18
    1730:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1732:	6e 89       	ldd	r22, Y+22	; 0x16
    1734:	7f 89       	ldd	r23, Y+23	; 0x17
    1736:	88 8d       	ldd	r24, Y+24	; 0x18
    1738:	99 8d       	ldd	r25, Y+25	; 0x19
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	2c f4       	brge	.+10     	; 0x1754 <LCD_voidInit+0x3cc>
		__ticks = 1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	9d 8b       	std	Y+21, r25	; 0x15
    1750:	8c 8b       	std	Y+20, r24	; 0x14
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1754:	6e 89       	ldd	r22, Y+22	; 0x16
    1756:	7f 89       	ldd	r23, Y+23	; 0x17
    1758:	88 8d       	ldd	r24, Y+24	; 0x18
    175a:	99 8d       	ldd	r25, Y+25	; 0x19
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	4f e7       	ldi	r20, 0x7F	; 127
    1762:	57 e4       	ldi	r21, 0x47	; 71
    1764:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1768:	18 16       	cp	r1, r24
    176a:	4c f5       	brge	.+82     	; 0x17be <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    176e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1770:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1772:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	51 e4       	ldi	r21, 0x41	; 65
    177c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	9d 8b       	std	Y+21, r25	; 0x15
    1792:	8c 8b       	std	Y+20, r24	; 0x14
    1794:	0f c0       	rjmp	.+30     	; 0x17b4 <LCD_voidInit+0x42c>
    1796:	88 ec       	ldi	r24, 0xC8	; 200
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9b 8b       	std	Y+19, r25	; 0x13
    179c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    179e:	8a 89       	ldd	r24, Y+18	; 0x12
    17a0:	9b 89       	ldd	r25, Y+19	; 0x13
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_voidInit+0x41a>
    17a6:	9b 8b       	std	Y+19, r25	; 0x13
    17a8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17aa:	8c 89       	ldd	r24, Y+20	; 0x14
    17ac:	9d 89       	ldd	r25, Y+21	; 0x15
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	9d 8b       	std	Y+21, r25	; 0x15
    17b2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b4:	8c 89       	ldd	r24, Y+20	; 0x14
    17b6:	9d 89       	ldd	r25, Y+21	; 0x15
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	69 f7       	brne	.-38     	; 0x1796 <LCD_voidInit+0x40e>
    17bc:	24 c0       	rjmp	.+72     	; 0x1806 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17be:	6e 89       	ldd	r22, Y+22	; 0x16
    17c0:	7f 89       	ldd	r23, Y+23	; 0x17
    17c2:	88 8d       	ldd	r24, Y+24	; 0x18
    17c4:	99 8d       	ldd	r25, Y+25	; 0x19
    17c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	9d 8b       	std	Y+21, r25	; 0x15
    17d0:	8c 8b       	std	Y+20, r24	; 0x14
    17d2:	8c 89       	ldd	r24, Y+20	; 0x14
    17d4:	9d 89       	ldd	r25, Y+21	; 0x15
    17d6:	99 8b       	std	Y+17, r25	; 0x11
    17d8:	88 8b       	std	Y+16, r24	; 0x10
    17da:	88 89       	ldd	r24, Y+16	; 0x10
    17dc:	99 89       	ldd	r25, Y+17	; 0x11
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_voidInit+0x456>
    17e2:	99 8b       	std	Y+17, r25	; 0x11
    17e4:	88 8b       	std	Y+16, r24	; 0x10
    17e6:	0f c0       	rjmp	.+30     	; 0x1806 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17e8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17ea:	78 a1       	ldd	r23, Y+32	; 0x20
    17ec:	89 a1       	ldd	r24, Y+33	; 0x21
    17ee:	9a a1       	ldd	r25, Y+34	; 0x22
    17f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8e 8f       	std	Y+30, r24	; 0x1e
    17fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17fc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1800:	8a 95       	dec	r24
    1802:	f1 f7       	brne	.-4      	; 0x1800 <LCD_voidInit+0x478>
    1804:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*Display Clear*/
	LCD_voidSendCmnd(0x01);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e4       	ldi	r27, 0x40	; 64
    1814:	8b 87       	std	Y+11, r24	; 0x0b
    1816:	9c 87       	std	Y+12, r25	; 0x0c
    1818:	ad 87       	std	Y+13, r26	; 0x0d
    181a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	6b 85       	ldd	r22, Y+11	; 0x0b
    181e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1820:	8d 85       	ldd	r24, Y+13	; 0x0d
    1822:	9e 85       	ldd	r25, Y+14	; 0x0e
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8f 83       	std	Y+7, r24	; 0x07
    1836:	98 87       	std	Y+8, r25	; 0x08
    1838:	a9 87       	std	Y+9, r26	; 0x09
    183a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <LCD_voidInit+0x4d6>
		__ticks = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    185e:	6f 81       	ldd	r22, Y+7	; 0x07
    1860:	78 85       	ldd	r23, Y+8	; 0x08
    1862:	89 85       	ldd	r24, Y+9	; 0x09
    1864:	9a 85       	ldd	r25, Y+10	; 0x0a
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	6b 85       	ldd	r22, Y+11	; 0x0b
    1878:	7c 85       	ldd	r23, Y+12	; 0x0c
    187a:	8d 85       	ldd	r24, Y+13	; 0x0d
    187c:	9e 85       	ldd	r25, Y+14	; 0x0e
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_voidInit+0x536>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_voidInit+0x524>
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	8d 81       	ldd	r24, Y+5	; 0x05
    18b6:	9e 81       	ldd	r25, Y+6	; 0x06
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_voidInit+0x518>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	89 85       	ldd	r24, Y+9	; 0x09
    18ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	8d 83       	std	Y+5, r24	; 0x05
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_voidInit+0x560>
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Enter mode */
	LCD_voidSendCmnd(0b00000110);	
    18f0:	86 e0       	ldi	r24, 0x06	; 6
    18f2:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    _delay_ms(2);
    /*Enter mode */
    LCD_voidSendCmnd(0x00);
    LCD_voidSendCmnd(0x60);
 #endif
}
    18f6:	c4 5b       	subi	r28, 0xB4	; 180
    18f8:	df 4f       	sbci	r29, 0xFF	; 255
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <LCD_voidSendCmnd>:


void LCD_voidSendCmnd(u8 Copy_u8Cmnd){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	69 97       	sbiw	r28, 0x19	; 25
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	89 8f       	std	Y+25, r24	; 0x19
 #if LCD_u8_MODE == LCD_u8_MODE_8_BITS
	/*RS = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	/*RW = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	/*Write Command*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	69 8d       	ldd	r22, Y+25	; 0x19
    193c:	0e 94 c1 13 	call	0x2782	; 0x2782 <DIO_u8SetPortValue>
	/*En = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e8       	ldi	r26, 0x80	; 128
    1950:	bf e3       	ldi	r27, 0x3F	; 63
    1952:	8d 8b       	std	Y+21, r24	; 0x15
    1954:	9e 8b       	std	Y+22, r25	; 0x16
    1956:	af 8b       	std	Y+23, r26	; 0x17
    1958:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    195a:	6d 89       	ldd	r22, Y+21	; 0x15
    195c:	7e 89       	ldd	r23, Y+22	; 0x16
    195e:	8f 89       	ldd	r24, Y+23	; 0x17
    1960:	98 8d       	ldd	r25, Y+24	; 0x18
    1962:	2b ea       	ldi	r18, 0xAB	; 171
    1964:	3a ea       	ldi	r19, 0xAA	; 170
    1966:	4a e2       	ldi	r20, 0x2A	; 42
    1968:	50 e4       	ldi	r21, 0x40	; 64
    196a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	89 8b       	std	Y+17, r24	; 0x11
    1974:	9a 8b       	std	Y+18, r25	; 0x12
    1976:	ab 8b       	std	Y+19, r26	; 0x13
    1978:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    197a:	69 89       	ldd	r22, Y+17	; 0x11
    197c:	7a 89       	ldd	r23, Y+18	; 0x12
    197e:	8b 89       	ldd	r24, Y+19	; 0x13
    1980:	9c 89       	ldd	r25, Y+20	; 0x14
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	1c f4       	brge	.+6      	; 0x1998 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	88 8b       	std	Y+16, r24	; 0x10
    1996:	91 c0       	rjmp	.+290    	; 0x1aba <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1998:	69 89       	ldd	r22, Y+17	; 0x11
    199a:	7a 89       	ldd	r23, Y+18	; 0x12
    199c:	8b 89       	ldd	r24, Y+19	; 0x13
    199e:	9c 89       	ldd	r25, Y+20	; 0x14
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	53 e4       	ldi	r21, 0x43	; 67
    19a8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <LCD_voidSendCmnd+0xa4>
    19b0:	7b c0       	rjmp	.+246    	; 0x1aa8 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8c 87       	std	Y+12, r24	; 0x0c
    19cc:	9d 87       	std	Y+13, r25	; 0x0d
    19ce:	ae 87       	std	Y+14, r26	; 0x0e
    19d0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    19d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    19d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a ef       	ldi	r20, 0xFA	; 250
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	88 87       	std	Y+8, r24	; 0x08
    19ec:	99 87       	std	Y+9, r25	; 0x09
    19ee:	aa 87       	std	Y+10, r26	; 0x0a
    19f0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19f2:	68 85       	ldd	r22, Y+8	; 0x08
    19f4:	79 85       	ldd	r23, Y+9	; 0x09
    19f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    19f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9f 83       	std	Y+7, r25	; 0x07
    1a10:	8e 83       	std	Y+6, r24	; 0x06
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1a14:	68 85       	ldd	r22, Y+8	; 0x08
    1a16:	79 85       	ldd	r23, Y+9	; 0x09
    1a18:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a30:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a32:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9f 83       	std	Y+7, r25	; 0x07
    1a52:	8e 83       	std	Y+6, r24	; 0x06
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_voidSendCmnd+0x166>
    1a56:	88 ec       	ldi	r24, 0xC8	; 200
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9d 83       	std	Y+5, r25	; 0x05
    1a5c:	8c 83       	std	Y+4, r24	; 0x04
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_voidSendCmnd+0x154>
    1a66:	9d 83       	std	Y+5, r25	; 0x05
    1a68:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9f 83       	std	Y+7, r25	; 0x07
    1a72:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8e 81       	ldd	r24, Y+6	; 0x06
    1a76:	9f 81       	ldd	r25, Y+7	; 0x07
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_voidSendCmnd+0x148>
    1a7c:	24 c0       	rjmp	.+72     	; 0x1ac6 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	68 85       	ldd	r22, Y+8	; 0x08
    1a80:	79 85       	ldd	r23, Y+9	; 0x09
    1a82:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a84:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9f 83       	std	Y+7, r25	; 0x07
    1a90:	8e 83       	std	Y+6, r24	; 0x06
    1a92:	8e 81       	ldd	r24, Y+6	; 0x06
    1a94:	9f 81       	ldd	r25, Y+7	; 0x07
    1a96:	9b 83       	std	Y+3, r25	; 0x03
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_voidSendCmnd+0x190>
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	8a 83       	std	Y+2, r24	; 0x02
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa8:	69 89       	ldd	r22, Y+17	; 0x11
    1aaa:	7a 89       	ldd	r23, Y+18	; 0x12
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	88 8b       	std	Y+16, r24	; 0x10
    1aba:	88 89       	ldd	r24, Y+16	; 0x10
    1abc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	8a 95       	dec	r24
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_voidSendCmnd+0x1b2>
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/*En = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	/*En = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
 #endif	
}
    1ad0:	69 96       	adiw	r28, 0x19	; 25
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char){
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	69 97       	sbiw	r28, 0x19	; 25
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	89 8f       	std	Y+25, r24	; 0x19
 #if LCD_u8_MODE == LCD_u8_MODE_8_BITS
	/*RS = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	/*RW = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	61 e0       	ldi	r22, 0x01	; 1
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	/*Write char*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b10:	0e 94 c1 13 	call	0x2782	; 0x2782 <DIO_u8SetPortValue>
	/*En = 1*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e8       	ldi	r26, 0x80	; 128
    1b24:	bf e3       	ldi	r27, 0x3F	; 63
    1b26:	8d 8b       	std	Y+21, r24	; 0x15
    1b28:	9e 8b       	std	Y+22, r25	; 0x16
    1b2a:	af 8b       	std	Y+23, r26	; 0x17
    1b2c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	2b ea       	ldi	r18, 0xAB	; 171
    1b38:	3a ea       	ldi	r19, 0xAA	; 170
    1b3a:	4a e2       	ldi	r20, 0x2A	; 42
    1b3c:	50 e4       	ldi	r21, 0x40	; 64
    1b3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 8b       	std	Y+17, r24	; 0x11
    1b48:	9a 8b       	std	Y+18, r25	; 0x12
    1b4a:	ab 8b       	std	Y+19, r26	; 0x13
    1b4c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b4e:	69 89       	ldd	r22, Y+17	; 0x11
    1b50:	7a 89       	ldd	r23, Y+18	; 0x12
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	1c f4       	brge	.+6      	; 0x1b6c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	88 8b       	std	Y+16, r24	; 0x10
    1b6a:	91 c0       	rjmp	.+290    	; 0x1c8e <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1b6c:	69 89       	ldd	r22, Y+17	; 0x11
    1b6e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b70:	8b 89       	ldd	r24, Y+19	; 0x13
    1b72:	9c 89       	ldd	r25, Y+20	; 0x14
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	53 e4       	ldi	r21, 0x43	; 67
    1b7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	0c f0       	brlt	.+2      	; 0x1b86 <LCD_voidSendChar+0xa4>
    1b84:	7b c0       	rjmp	.+246    	; 0x1c7c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a e7       	ldi	r20, 0x7A	; 122
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8c 87       	std	Y+12, r24	; 0x0c
    1ba0:	9d 87       	std	Y+13, r25	; 0x0d
    1ba2:	ae 87       	std	Y+14, r26	; 0x0e
    1ba4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ba8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bac:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	88 87       	std	Y+8, r24	; 0x08
    1bc0:	99 87       	std	Y+9, r25	; 0x09
    1bc2:	aa 87       	std	Y+10, r26	; 0x0a
    1bc4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bc6:	68 85       	ldd	r22, Y+8	; 0x08
    1bc8:	79 85       	ldd	r23, Y+9	; 0x09
    1bca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_voidSendChar+0x106>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9f 83       	std	Y+7, r25	; 0x07
    1be4:	8e 83       	std	Y+6, r24	; 0x06
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1be8:	68 85       	ldd	r22, Y+8	; 0x08
    1bea:	79 85       	ldd	r23, Y+9	; 0x09
    1bec:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bee:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c02:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c04:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c06:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9f 83       	std	Y+7, r25	; 0x07
    1c26:	8e 83       	std	Y+6, r24	; 0x06
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_voidSendChar+0x166>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9d 83       	std	Y+5, r25	; 0x05
    1c30:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_voidSendChar+0x154>
    1c3a:	9d 83       	std	Y+5, r25	; 0x05
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c40:	9f 81       	ldd	r25, Y+7	; 0x07
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9f 83       	std	Y+7, r25	; 0x07
    1c46:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8e 81       	ldd	r24, Y+6	; 0x06
    1c4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_voidSendChar+0x148>
    1c50:	24 c0       	rjmp	.+72     	; 0x1c9a <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	68 85       	ldd	r22, Y+8	; 0x08
    1c54:	79 85       	ldd	r23, Y+9	; 0x09
    1c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9f 83       	std	Y+7, r25	; 0x07
    1c64:	8e 83       	std	Y+6, r24	; 0x06
    1c66:	8e 81       	ldd	r24, Y+6	; 0x06
    1c68:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6a:	9b 83       	std	Y+3, r25	; 0x03
    1c6c:	8a 83       	std	Y+2, r24	; 0x02
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	9b 81       	ldd	r25, Y+3	; 0x03
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_voidSendChar+0x190>
    1c76:	9b 83       	std	Y+3, r25	; 0x03
    1c78:	8a 83       	std	Y+2, r24	; 0x02
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c7c:	69 89       	ldd	r22, Y+17	; 0x11
    1c7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1c80:	8b 89       	ldd	r24, Y+19	; 0x13
    1c82:	9c 89       	ldd	r25, Y+20	; 0x14
    1c84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	88 8b       	std	Y+16, r24	; 0x10
    1c8e:	88 89       	ldd	r24, Y+16	; 0x10
    1c90:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	8a 95       	dec	r24
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_voidSendChar+0x1b2>
    1c98:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	/*En = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);	
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	62 e0       	ldi	r22, 0x02	; 2
    1c9e:	40 e0       	ldi	r20, 0x00	; 0
    1ca0:	0e 94 41 11 	call	0x2282	; 0x2282 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_us(1);
	/*En = 0*/
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
 #endif	
}
    1ca4:	69 96       	adiw	r28, 0x19	; 25
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD_voidWriteString>:

void LCD_voidWriteString (char * Copy_pcString)		/* Send string to LCD function */
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <LCD_voidWriteString+0x6>
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <LCD_voidWriteString+0x8>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <LCD_voidWriteString+0xa>
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	9e 83       	std	Y+6, r25	; 0x06
    1cc6:	8d 83       	std	Y+5, r24	; 0x05
	u32 initial;
	for(initial=0;Copy_pcString[initial]!=0;initial++)		/* Send each char of string till the NULL */
    1cc8:	19 82       	std	Y+1, r1	; 0x01
    1cca:	1a 82       	std	Y+2, r1	; 0x02
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	1c 82       	std	Y+4, r1	; 0x04
    1cd0:	15 c0       	rjmp	.+42     	; 0x1cfc <LCD_voidWriteString+0x46>
	{
		LCD_voidSendChar (Copy_pcString[initial]);
    1cd2:	29 81       	ldd	r18, Y+1	; 0x01
    1cd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cda:	fc 01       	movw	r30, r24
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	80 81       	ld	r24, Z
    1ce2:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <LCD_voidSendChar>
}

void LCD_voidWriteString (char * Copy_pcString)		/* Send string to LCD function */
{
	u32 initial;
	for(initial=0;Copy_pcString[initial]!=0;initial++)		/* Send each char of string till the NULL */
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	ab 81       	ldd	r26, Y+3	; 0x03
    1cec:	bc 81       	ldd	r27, Y+4	; 0x04
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	b1 1d       	adc	r27, r1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	ab 83       	std	Y+3, r26	; 0x03
    1cfa:	bc 83       	std	Y+4, r27	; 0x04
    1cfc:	29 81       	ldd	r18, Y+1	; 0x01
    1cfe:	3a 81       	ldd	r19, Y+2	; 0x02
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	fc 01       	movw	r30, r24
    1d06:	e2 0f       	add	r30, r18
    1d08:	f3 1f       	adc	r31, r19
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 23       	and	r24, r24
    1d0e:	09 f7       	brne	.-62     	; 0x1cd2 <LCD_voidWriteString+0x1c>
	{
		LCD_voidSendChar (Copy_pcString[initial]);
	}
}
    1d10:	26 96       	adiw	r28, 0x06	; 6
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 Copy_u8LineNum,u8 Copy_u8Location){
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <LCD_u8GoToXY+0x6>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <LCD_u8GoToXY+0x8>
    1d2a:	0f 92       	push	r0
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	8a 83       	std	Y+2, r24	; 0x02
    1d32:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	88 32       	cpi	r24, 0x28	; 40
    1d3c:	e0 f4       	brcc	.+56     	; 0x1d76 <LCD_u8GoToXY+0x54>
	{
		switch (Copy_u8LineNum)
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3d 83       	std	Y+5, r19	; 0x05
    1d46:	2c 83       	std	Y+4, r18	; 0x04
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	31 f0       	breq	.+12     	; 0x1d5e <LCD_u8GoToXY+0x3c>
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	3d 81       	ldd	r19, Y+5	; 0x05
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	31 f0       	breq	.+12     	; 0x1d68 <LCD_u8GoToXY+0x46>
    1d5c:	0a c0       	rjmp	.+20     	; 0x1d72 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8Location);break;
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	80 58       	subi	r24, 0x80	; 128
    1d62:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    1d66:	08 c0       	rjmp	.+16     	; 0x1d78 <LCD_u8GoToXY+0x56>
			case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8Location);break;
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 54       	subi	r24, 0x40	; 64
    1d6c:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <LCD_u8GoToXY+0x56>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	01 c0       	rjmp	.+2      	; 0x1d78 <LCD_u8GoToXY+0x56>

		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d76:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <LCD_voidClear>:

void LCD_voidClear(void){
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	2e 97       	sbiw	r28, 0x0e	; 14
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(0x01);		/* Clear display */
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a0 e0       	ldi	r26, 0x00	; 0
    1daa:	b0 e4       	ldi	r27, 0x40	; 64
    1dac:	8b 87       	std	Y+11, r24	; 0x0b
    1dae:	9c 87       	std	Y+12, r25	; 0x0c
    1db0:	ad 87       	std	Y+13, r26	; 0x0d
    1db2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8f 83       	std	Y+7, r24	; 0x07
    1dce:	98 87       	std	Y+8, r25	; 0x08
    1dd0:	a9 87       	std	Y+9, r26	; 0x09
    1dd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd6:	78 85       	ldd	r23, Y+8	; 0x08
    1dd8:	89 85       	ldd	r24, Y+9	; 0x09
    1dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <LCD_voidClear+0x6c>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    1df6:	6f 81       	ldd	r22, Y+7	; 0x07
    1df8:	78 85       	ldd	r23, Y+8	; 0x08
    1dfa:	89 85       	ldd	r24, Y+9	; 0x09
    1dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <LCD_voidClear+0xcc>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 83       	std	Y+4, r25	; 0x04
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_voidClear+0xba>
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <LCD_voidClear+0xae>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9e 83       	std	Y+6, r25	; 0x06
    1e72:	8d 83       	std	Y+5, r24	; 0x05
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	9e 81       	ldd	r25, Y+6	; 0x06
    1e78:	9a 83       	std	Y+2, r25	; 0x02
    1e7a:	89 83       	std	Y+1, r24	; 0x01
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <LCD_voidClear+0xf6>
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmnd(0x80);		/* Cursor at home position */
    1e88:	80 e8       	ldi	r24, 0x80	; 128
    1e8a:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
}
    1e8e:	2e 96       	adiw	r28, 0x0e	; 14
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_voidSendNum>:

void LCD_voidSendNum(u32 Copy_u32Num){
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	00 d0       	rcall	.+0      	; 0x1ea6 <LCD_voidSendNum+0x6>
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <LCD_voidSendNum+0x8>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <LCD_voidSendNum+0xa>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	6b 83       	std	Y+3, r22	; 0x03
    1eb0:	7c 83       	std	Y+4, r23	; 0x04
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
	u8 Local_u8Remider , Local_u8ReverseNumber = 0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    1eb8:	32 c0       	rjmp	.+100    	; 0x1f1e <LCD_voidSendNum+0x7e>
	while(Copy_u32Num != 0)
	{
		Local_u8Remider = Copy_u32Num % 10;
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	ad 81       	ldd	r26, Y+5	; 0x05
    1ec0:	be 81       	ldd	r27, Y+6	; 0x06
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 6d 14 	call	0x28da	; 0x28da <__udivmodsi4>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8ReverseNumber = (Local_u8ReverseNumber *10) + Local_u8Remider;
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 01       	movw	r18, r24
    1ee0:	22 0f       	add	r18, r18
    1ee2:	33 1f       	adc	r19, r19
    1ee4:	c9 01       	movw	r24, r18
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef6:	89 0f       	add	r24, r25
    1ef8:	89 83       	std	Y+1, r24	; 0x01
		Copy_u32Num /=10;
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	ad 81       	ldd	r26, Y+5	; 0x05
    1f00:	be 81       	ldd	r27, Y+6	; 0x06
    1f02:	2a e0       	ldi	r18, 0x0A	; 10
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	50 e0       	ldi	r21, 0x00	; 0
    1f0a:	bc 01       	movw	r22, r24
    1f0c:	cd 01       	movw	r24, r26
    1f0e:	0e 94 6d 14 	call	0x28da	; 0x28da <__udivmodsi4>
    1f12:	da 01       	movw	r26, r20
    1f14:	c9 01       	movw	r24, r18
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	ad 83       	std	Y+5, r26	; 0x05
    1f1c:	be 83       	std	Y+6, r27	; 0x06
	LCD_voidSendCmnd(0x80);		/* Cursor at home position */
}

void LCD_voidSendNum(u32 Copy_u32Num){
	u8 Local_u8Remider , Local_u8ReverseNumber = 0;
	while(Copy_u32Num != 0)
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	ad 81       	ldd	r26, Y+5	; 0x05
    1f24:	be 81       	ldd	r27, Y+6	; 0x06
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	a1 05       	cpc	r26, r1
    1f2a:	b1 05       	cpc	r27, r1
    1f2c:	31 f6       	brne	.-116    	; 0x1eba <LCD_voidSendNum+0x1a>
    1f2e:	0f c0       	rjmp	.+30     	; 0x1f4e <LCD_voidSendNum+0xae>
		Local_u8ReverseNumber = (Local_u8ReverseNumber *10) + Local_u8Remider;
		Copy_u32Num /=10;
	}
	while(Local_u8ReverseNumber != 0)
	{
		LCD_voidSendChar((Local_u8ReverseNumber % 10) + '0');
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a e0       	ldi	r25, 0x0A	; 10
    1f34:	69 2f       	mov	r22, r25
    1f36:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodqi4>
    1f3a:	89 2f       	mov	r24, r25
    1f3c:	80 5d       	subi	r24, 0xD0	; 208
    1f3e:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <LCD_voidSendChar>
		Local_u8ReverseNumber /= 10;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a e0       	ldi	r25, 0x0A	; 10
    1f46:	69 2f       	mov	r22, r25
    1f48:	0e 94 61 14 	call	0x28c2	; 0x28c2 <__udivmodqi4>
    1f4c:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u8Remider = Copy_u32Num % 10;
		Local_u8ReverseNumber = (Local_u8ReverseNumber *10) + Local_u8Remider;
		Copy_u32Num /=10;
	}
	while(Local_u8ReverseNumber != 0)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	88 23       	and	r24, r24
    1f52:	71 f7       	brne	.-36     	; 0x1f30 <LCD_voidSendNum+0x90>
	{
		LCD_voidSendChar((Local_u8ReverseNumber % 10) + '0');
		Local_u8ReverseNumber /= 10;
	}
}
    1f54:	26 96       	adiw	r28, 0x06	; 6
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <LCD_u8CreateCustomChar>:
u8 LCD_u8CreateCustomChar(u8 Copy_u8Location , u8 * Copy_pu8CharArray){
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <LCD_u8CreateCustomChar+0x6>
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <LCD_u8CreateCustomChar+0x8>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	8b 83       	std	Y+3, r24	; 0x03
    1f76:	7d 83       	std	Y+5, r23	; 0x05
    1f78:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_pu8CharArray != NULL && Copy_u8Location < MAX_CHARACTERS )
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	9d 81       	ldd	r25, Y+5	; 0x05
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	39 f1       	breq	.+78     	; 0x1fd4 <LCD_u8CreateCustomChar+0x6e>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	88 30       	cpi	r24, 0x08	; 8
    1f8a:	20 f5       	brcc	.+72     	; 0x1fd4 <LCD_u8CreateCustomChar+0x6e>
    {
        LCD_voidSendCmnd(ADDRESS_OF_CGRAM + (Copy_u8Location * MAX_CHARACTERS ));
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	08 96       	adiw	r24, 0x08	; 8
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_voidSendCmnd>
        for (u8 Local_u8Counter = 0; Local_u8Counter < MAX_CHARACTERS ; Local_u8Counter++)
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	0e c0       	rjmp	.+28     	; 0x1fc4 <LCD_u8CreateCustomChar+0x5e>
        {
            LCD_voidSendChar(Copy_pu8CharArray[Local_u8Counter]);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	e2 0f       	add	r30, r18
    1fb6:	f3 1f       	adc	r31, r19
    1fb8:	80 81       	ld	r24, Z
    1fba:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <LCD_voidSendChar>
u8 LCD_u8CreateCustomChar(u8 Copy_u8Location , u8 * Copy_pu8CharArray){
	u8 Local_u8ErrorState = STD_TYPES_OK;
    if(Copy_pu8CharArray != NULL && Copy_u8Location < MAX_CHARACTERS )
    {
        LCD_voidSendCmnd(ADDRESS_OF_CGRAM + (Copy_u8Location * MAX_CHARACTERS ));
        for (u8 Local_u8Counter = 0; Local_u8Counter < MAX_CHARACTERS ; Local_u8Counter++)
    1fbe:	89 81       	ldd	r24, Y+1	; 0x01
    1fc0:	8f 5f       	subi	r24, 0xFF	; 255
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	88 30       	cpi	r24, 0x08	; 8
    1fc8:	78 f3       	brcs	.-34     	; 0x1fa8 <LCD_u8CreateCustomChar+0x42>
        {
            LCD_voidSendChar(Copy_pu8CharArray[Local_u8Counter]);
        }
        LCD_u8GoToXY(0,0);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_u8GoToXY>
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <LCD_u8CreateCustomChar+0x70>
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    1fd4:	1a 82       	std	Y+2, r1	; 0x02
    }
	return Local_u8ErrorState;
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <DIO_voidInit>:
#include"DIO_interface.h"
#include"DIO_private.h"
#include"DIO_config.h"

/* put parametrs on the registers */
void DIO_voidInit (void){
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	 DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
    1ff0:	ea e3       	ldi	r30, 0x3A	; 58
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	8f e0       	ldi	r24, 0x0F	; 15
    1ff6:	80 83       	st	Z, r24
                           DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);

    DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
    1ff8:	e7 e3       	ldi	r30, 0x37	; 55
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	87 e1       	ldi	r24, 0x17	; 23
    1ffe:	80 83       	st	Z, r24
                           DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);

    DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
    2000:	e4 e3       	ldi	r30, 0x34	; 52
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	10 82       	st	Z, r1
                           DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);

    DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    2006:	e1 e3       	ldi	r30, 0x31	; 49
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	80 83       	st	Z, r24
                           DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

    DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	80 83       	st	Z, r24
    		                DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);

    DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    2016:	e8 e3       	ldi	r30, 0x38	; 56
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1
                            DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);

    DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    201c:	e5 e3       	ldi	r30, 0x35	; 53
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	10 82       	st	Z, r1
    		DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);

    DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	10 82       	st	Z, r1
                            DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
	
}
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <DIO_u8setpInDirection>:

u8 DIO_u8setpInDirection   (u8 Copy_u8PortId, u8 Copy_u8PinId , u8 Copy_u8PinDirection){
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	2e 97       	sbiw	r28, 0x0e	; 14
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	8a 83       	std	Y+2, r24	; 0x02
    2044:	6b 83       	std	Y+3, r22	; 0x03
    2046:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	89 83       	std	Y+1, r24	; 0x01
    if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_OUTPUT)|| (Copy_u8PinDirection == DIO_u8_INPUT)) )
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	84 30       	cpi	r24, 0x04	; 4
    2050:	08 f0       	brcs	.+2      	; 0x2054 <DIO_u8setpInDirection+0x26>
    2052:	0c c1       	rjmp	.+536    	; 0x226c <DIO_u8setpInDirection+0x23e>
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	88 30       	cpi	r24, 0x08	; 8
    2058:	08 f0       	brcs	.+2      	; 0x205c <DIO_u8setpInDirection+0x2e>
    205a:	08 c1       	rjmp	.+528    	; 0x226c <DIO_u8setpInDirection+0x23e>
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	21 f0       	breq	.+8      	; 0x206a <DIO_u8setpInDirection+0x3c>
    2062:	8c 81       	ldd	r24, Y+4	; 0x04
    2064:	88 23       	and	r24, r24
    2066:	09 f0       	breq	.+2      	; 0x206a <DIO_u8setpInDirection+0x3c>
    2068:	01 c1       	rjmp	.+514    	; 0x226c <DIO_u8setpInDirection+0x23e>
	{
		switch(Copy_u8PortId)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	3e 87       	std	Y+14, r19	; 0x0e
    2072:	2d 87       	std	Y+13, r18	; 0x0d
    2074:	8d 85       	ldd	r24, Y+13	; 0x0d
    2076:	9e 85       	ldd	r25, Y+14	; 0x0e
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <DIO_u8setpInDirection+0x52>
    207e:	4f c0       	rjmp	.+158    	; 0x211e <DIO_u8setpInDirection+0xf0>
    2080:	2d 85       	ldd	r18, Y+13	; 0x0d
    2082:	3e 85       	ldd	r19, Y+14	; 0x0e
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	2c f4       	brge	.+10     	; 0x2094 <DIO_u8setpInDirection+0x66>
    208a:	8d 85       	ldd	r24, Y+13	; 0x0d
    208c:	9e 85       	ldd	r25, Y+14	; 0x0e
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	71 f0       	breq	.+28     	; 0x20ae <DIO_u8setpInDirection+0x80>
    2092:	ed c0       	rjmp	.+474    	; 0x226e <DIO_u8setpInDirection+0x240>
    2094:	2d 85       	ldd	r18, Y+13	; 0x0d
    2096:	3e 85       	ldd	r19, Y+14	; 0x0e
    2098:	22 30       	cpi	r18, 0x02	; 2
    209a:	31 05       	cpc	r19, r1
    209c:	09 f4       	brne	.+2      	; 0x20a0 <DIO_u8setpInDirection+0x72>
    209e:	77 c0       	rjmp	.+238    	; 0x218e <DIO_u8setpInDirection+0x160>
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a4:	83 30       	cpi	r24, 0x03	; 3
    20a6:	91 05       	cpc	r25, r1
    20a8:	09 f4       	brne	.+2      	; 0x20ac <DIO_u8setpInDirection+0x7e>
    20aa:	a9 c0       	rjmp	.+338    	; 0x21fe <DIO_u8setpInDirection+0x1d0>
    20ac:	e0 c0       	rjmp	.+448    	; 0x226e <DIO_u8setpInDirection+0x240>
		{
			case DIO_u8_PORTA:
			    switch (Copy_u8PinDirection)
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	3c 87       	std	Y+12, r19	; 0x0c
    20b6:	2b 87       	std	Y+11, r18	; 0x0b
    20b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    20ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	d1 f0       	breq	.+52     	; 0x20f4 <DIO_u8setpInDirection+0xc6>
    20c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    20c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    20c4:	21 30       	cpi	r18, 0x01	; 1
    20c6:	31 05       	cpc	r19, r1
    20c8:	09 f0       	breq	.+2      	; 0x20cc <DIO_u8setpInDirection+0x9e>
    20ca:	d1 c0       	rjmp	.+418    	; 0x226e <DIO_u8setpInDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    20cc:	aa e3       	ldi	r26, 0x3A	; 58
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ea e3       	ldi	r30, 0x3A	; 58
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	48 2f       	mov	r20, r24
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	02 2e       	mov	r0, r18
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <DIO_u8setpInDirection+0xbc>
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	0a 94       	dec	r0
    20ec:	e2 f7       	brpl	.-8      	; 0x20e6 <DIO_u8setpInDirection+0xb8>
    20ee:	84 2b       	or	r24, r20
    20f0:	8c 93       	st	X, r24
    20f2:	bd c0       	rjmp	.+378    	; 0x226e <DIO_u8setpInDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    20f4:	aa e3       	ldi	r26, 0x3A	; 58
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	ea e3       	ldi	r30, 0x3A	; 58
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	48 2f       	mov	r20, r24
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	02 2e       	mov	r0, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_u8setpInDirection+0xe4>
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	0a 94       	dec	r0
    2114:	e2 f7       	brpl	.-8      	; 0x210e <DIO_u8setpInDirection+0xe0>
    2116:	80 95       	com	r24
    2118:	84 23       	and	r24, r20
    211a:	8c 93       	st	X, r24
    211c:	a8 c0       	rjmp	.+336    	; 0x226e <DIO_u8setpInDirection+0x240>
				}
			break;
			case DIO_u8_PORTB:
			    switch (Copy_u8PinDirection)
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	3a 87       	std	Y+10, r19	; 0x0a
    2126:	29 87       	std	Y+9, r18	; 0x09
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	00 97       	sbiw	r24, 0x00	; 0
    212e:	d1 f0       	breq	.+52     	; 0x2164 <DIO_u8setpInDirection+0x136>
    2130:	29 85       	ldd	r18, Y+9	; 0x09
    2132:	3a 85       	ldd	r19, Y+10	; 0x0a
    2134:	21 30       	cpi	r18, 0x01	; 1
    2136:	31 05       	cpc	r19, r1
    2138:	09 f0       	breq	.+2      	; 0x213c <DIO_u8setpInDirection+0x10e>
    213a:	99 c0       	rjmp	.+306    	; 0x226e <DIO_u8setpInDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    213c:	a7 e3       	ldi	r26, 0x37	; 55
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e7 e3       	ldi	r30, 0x37	; 55
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	48 2f       	mov	r20, r24
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	02 2e       	mov	r0, r18
    2154:	02 c0       	rjmp	.+4      	; 0x215a <DIO_u8setpInDirection+0x12c>
    2156:	88 0f       	add	r24, r24
    2158:	99 1f       	adc	r25, r25
    215a:	0a 94       	dec	r0
    215c:	e2 f7       	brpl	.-8      	; 0x2156 <DIO_u8setpInDirection+0x128>
    215e:	84 2b       	or	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	85 c0       	rjmp	.+266    	; 0x226e <DIO_u8setpInDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    2164:	a7 e3       	ldi	r26, 0x37	; 55
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e7 e3       	ldi	r30, 0x37	; 55
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_u8setpInDirection+0x154>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_u8setpInDirection+0x150>
    2186:	80 95       	com	r24
    2188:	84 23       	and	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	70 c0       	rjmp	.+224    	; 0x226e <DIO_u8setpInDirection+0x240>
				}
			break;
			case DIO_u8_PORTC:
			    switch (Copy_u8PinDirection)
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	38 87       	std	Y+8, r19	; 0x08
    2196:	2f 83       	std	Y+7, r18	; 0x07
    2198:	8f 81       	ldd	r24, Y+7	; 0x07
    219a:	98 85       	ldd	r25, Y+8	; 0x08
    219c:	00 97       	sbiw	r24, 0x00	; 0
    219e:	d1 f0       	breq	.+52     	; 0x21d4 <DIO_u8setpInDirection+0x1a6>
    21a0:	2f 81       	ldd	r18, Y+7	; 0x07
    21a2:	38 85       	ldd	r19, Y+8	; 0x08
    21a4:	21 30       	cpi	r18, 0x01	; 1
    21a6:	31 05       	cpc	r19, r1
    21a8:	09 f0       	breq	.+2      	; 0x21ac <DIO_u8setpInDirection+0x17e>
    21aa:	61 c0       	rjmp	.+194    	; 0x226e <DIO_u8setpInDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    21ac:	a4 e3       	ldi	r26, 0x34	; 52
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e4 e3       	ldi	r30, 0x34	; 52
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <DIO_u8setpInDirection+0x19c>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <DIO_u8setpInDirection+0x198>
    21ce:	84 2b       	or	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	4d c0       	rjmp	.+154    	; 0x226e <DIO_u8setpInDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    21d4:	a4 e3       	ldi	r26, 0x34	; 52
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e4 e3       	ldi	r30, 0x34	; 52
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <DIO_u8setpInDirection+0x1c4>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <DIO_u8setpInDirection+0x1c0>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	38 c0       	rjmp	.+112    	; 0x226e <DIO_u8setpInDirection+0x240>
				}
			break;
			case DIO_u8_PORTD:
			    switch (Copy_u8PinDirection)
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	3e 83       	std	Y+6, r19	; 0x06
    2206:	2d 83       	std	Y+5, r18	; 0x05
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	c9 f0       	breq	.+50     	; 0x2242 <DIO_u8setpInDirection+0x214>
    2210:	2d 81       	ldd	r18, Y+5	; 0x05
    2212:	3e 81       	ldd	r19, Y+6	; 0x06
    2214:	21 30       	cpi	r18, 0x01	; 1
    2216:	31 05       	cpc	r19, r1
    2218:	51 f5       	brne	.+84     	; 0x226e <DIO_u8setpInDirection+0x240>
				{
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    221a:	a1 e3       	ldi	r26, 0x31	; 49
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e1 e3       	ldi	r30, 0x31	; 49
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	48 2f       	mov	r20, r24
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	02 2e       	mov	r0, r18
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <DIO_u8setpInDirection+0x20a>
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <DIO_u8setpInDirection+0x206>
    223c:	84 2b       	or	r24, r20
    223e:	8c 93       	st	X, r24
    2240:	16 c0       	rjmp	.+44     	; 0x226e <DIO_u8setpInDirection+0x240>
					case DIO_u8_INPUT: CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    2242:	a1 e3       	ldi	r26, 0x31	; 49
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e1 e3       	ldi	r30, 0x31	; 49
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	48 2f       	mov	r20, r24
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	28 2f       	mov	r18, r24
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	02 2e       	mov	r0, r18
    225a:	02 c0       	rjmp	.+4      	; 0x2260 <DIO_u8setpInDirection+0x232>
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	0a 94       	dec	r0
    2262:	e2 f7       	brpl	.-8      	; 0x225c <DIO_u8setpInDirection+0x22e>
    2264:	80 95       	com	r24
    2266:	84 23       	and	r24, r20
    2268:	8c 93       	st	X, r24
    226a:	01 c0       	rjmp	.+2      	; 0x226e <DIO_u8setpInDirection+0x240>
		    
		}
	}	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    226c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2270:	2e 96       	adiw	r28, 0x0e	; 14
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <DIO_u8SetPinValue>:

    /*if pin is output set value(0v or 5v)*/
u8 DIO_u8SetPinValue       (u8 Copy_u8PortId, u8 Copy_u8PinId , u8 Copy_u8PinValue){
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	2e 97       	sbiw	r28, 0x0e	; 14
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	8a 83       	std	Y+2, r24	; 0x02
    2298:	6b 83       	std	Y+3, r22	; 0x03
    229a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH)||(Copy_u8PinValue == DIO_u8_LOW)))
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	84 30       	cpi	r24, 0x04	; 4
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <DIO_u8SetPinValue+0x26>
    22a6:	0c c1       	rjmp	.+536    	; 0x24c0 <DIO_u8SetPinValue+0x23e>
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	88 30       	cpi	r24, 0x08	; 8
    22ac:	08 f0       	brcs	.+2      	; 0x22b0 <DIO_u8SetPinValue+0x2e>
    22ae:	08 c1       	rjmp	.+528    	; 0x24c0 <DIO_u8SetPinValue+0x23e>
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	81 30       	cpi	r24, 0x01	; 1
    22b4:	21 f0       	breq	.+8      	; 0x22be <DIO_u8SetPinValue+0x3c>
    22b6:	8c 81       	ldd	r24, Y+4	; 0x04
    22b8:	88 23       	and	r24, r24
    22ba:	09 f0       	breq	.+2      	; 0x22be <DIO_u8SetPinValue+0x3c>
    22bc:	01 c1       	rjmp	.+514    	; 0x24c0 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	3e 87       	std	Y+14, r19	; 0x0e
    22c6:	2d 87       	std	Y+13, r18	; 0x0d
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <DIO_u8SetPinValue+0x52>
    22d2:	4f c0       	rjmp	.+158    	; 0x2372 <DIO_u8SetPinValue+0xf0>
    22d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    22d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    22d8:	22 30       	cpi	r18, 0x02	; 2
    22da:	31 05       	cpc	r19, r1
    22dc:	2c f4       	brge	.+10     	; 0x22e8 <DIO_u8SetPinValue+0x66>
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	71 f0       	breq	.+28     	; 0x2302 <DIO_u8SetPinValue+0x80>
    22e6:	ed c0       	rjmp	.+474    	; 0x24c2 <DIO_u8SetPinValue+0x240>
    22e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    22ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    22ec:	22 30       	cpi	r18, 0x02	; 2
    22ee:	31 05       	cpc	r19, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <DIO_u8SetPinValue+0x72>
    22f2:	77 c0       	rjmp	.+238    	; 0x23e2 <DIO_u8SetPinValue+0x160>
    22f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	91 05       	cpc	r25, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <DIO_u8SetPinValue+0x7e>
    22fe:	a9 c0       	rjmp	.+338    	; 0x2452 <DIO_u8SetPinValue+0x1d0>
    2300:	e0 c0       	rjmp	.+448    	; 0x24c2 <DIO_u8SetPinValue+0x240>
		{
			case DIO_u8_PORTA:
			    switch(Copy_u8PinValue)
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3c 87       	std	Y+12, r19	; 0x0c
    230a:	2b 87       	std	Y+11, r18	; 0x0b
    230c:	8b 85       	ldd	r24, Y+11	; 0x0b
    230e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	d1 f0       	breq	.+52     	; 0x2348 <DIO_u8SetPinValue+0xc6>
    2314:	2b 85       	ldd	r18, Y+11	; 0x0b
    2316:	3c 85       	ldd	r19, Y+12	; 0x0c
    2318:	21 30       	cpi	r18, 0x01	; 1
    231a:	31 05       	cpc	r19, r1
    231c:	09 f0       	breq	.+2      	; 0x2320 <DIO_u8SetPinValue+0x9e>
    231e:	d1 c0       	rjmp	.+418    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    2320:	ab e3       	ldi	r26, 0x3B	; 59
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	eb e3       	ldi	r30, 0x3B	; 59
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_u8SetPinValue+0xbc>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_u8SetPinValue+0xb8>
    2342:	84 2b       	or	r24, r20
    2344:	8c 93       	st	X, r24
    2346:	bd c0       	rjmp	.+378    	; 0x24c2 <DIO_u8SetPinValue+0x240>
					case DIO_u8_LOW: CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    2348:	ab e3       	ldi	r26, 0x3B	; 59
    234a:	b0 e0       	ldi	r27, 0x00	; 0
    234c:	eb e3       	ldi	r30, 0x3B	; 59
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	48 2f       	mov	r20, r24
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	02 2e       	mov	r0, r18
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <DIO_u8SetPinValue+0xe4>
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	0a 94       	dec	r0
    2368:	e2 f7       	brpl	.-8      	; 0x2362 <DIO_u8SetPinValue+0xe0>
    236a:	80 95       	com	r24
    236c:	84 23       	and	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	a8 c0       	rjmp	.+336    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
			    switch(Copy_u8PinValue)
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	3a 87       	std	Y+10, r19	; 0x0a
    237a:	29 87       	std	Y+9, r18	; 0x09
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	d1 f0       	breq	.+52     	; 0x23b8 <DIO_u8SetPinValue+0x136>
    2384:	29 85       	ldd	r18, Y+9	; 0x09
    2386:	3a 85       	ldd	r19, Y+10	; 0x0a
    2388:	21 30       	cpi	r18, 0x01	; 1
    238a:	31 05       	cpc	r19, r1
    238c:	09 f0       	breq	.+2      	; 0x2390 <DIO_u8SetPinValue+0x10e>
    238e:	99 c0       	rjmp	.+306    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    2390:	a8 e3       	ldi	r26, 0x38	; 56
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e8 e3       	ldi	r30, 0x38	; 56
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	48 2f       	mov	r20, r24
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	02 2e       	mov	r0, r18
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <DIO_u8SetPinValue+0x12c>
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	0a 94       	dec	r0
    23b0:	e2 f7       	brpl	.-8      	; 0x23aa <DIO_u8SetPinValue+0x128>
    23b2:	84 2b       	or	r24, r20
    23b4:	8c 93       	st	X, r24
    23b6:	85 c0       	rjmp	.+266    	; 0x24c2 <DIO_u8SetPinValue+0x240>
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    23b8:	a8 e3       	ldi	r26, 0x38	; 56
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	e8 e3       	ldi	r30, 0x38	; 56
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	48 2f       	mov	r20, r24
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 2e       	mov	r0, r18
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <DIO_u8SetPinValue+0x154>
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	0a 94       	dec	r0
    23d8:	e2 f7       	brpl	.-8      	; 0x23d2 <DIO_u8SetPinValue+0x150>
    23da:	80 95       	com	r24
    23dc:	84 23       	and	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	70 c0       	rjmp	.+224    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
			    switch(Copy_u8PinValue)
    23e2:	8c 81       	ldd	r24, Y+4	; 0x04
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	38 87       	std	Y+8, r19	; 0x08
    23ea:	2f 83       	std	Y+7, r18	; 0x07
    23ec:	8f 81       	ldd	r24, Y+7	; 0x07
    23ee:	98 85       	ldd	r25, Y+8	; 0x08
    23f0:	00 97       	sbiw	r24, 0x00	; 0
    23f2:	d1 f0       	breq	.+52     	; 0x2428 <DIO_u8SetPinValue+0x1a6>
    23f4:	2f 81       	ldd	r18, Y+7	; 0x07
    23f6:	38 85       	ldd	r19, Y+8	; 0x08
    23f8:	21 30       	cpi	r18, 0x01	; 1
    23fa:	31 05       	cpc	r19, r1
    23fc:	09 f0       	breq	.+2      	; 0x2400 <DIO_u8SetPinValue+0x17e>
    23fe:	61 c0       	rjmp	.+194    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    2400:	a5 e3       	ldi	r26, 0x35	; 53
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e5 e3       	ldi	r30, 0x35	; 53
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	48 2f       	mov	r20, r24
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 2e       	mov	r0, r18
    2418:	02 c0       	rjmp	.+4      	; 0x241e <DIO_u8SetPinValue+0x19c>
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	0a 94       	dec	r0
    2420:	e2 f7       	brpl	.-8      	; 0x241a <DIO_u8SetPinValue+0x198>
    2422:	84 2b       	or	r24, r20
    2424:	8c 93       	st	X, r24
    2426:	4d c0       	rjmp	.+154    	; 0x24c2 <DIO_u8SetPinValue+0x240>
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    2428:	a5 e3       	ldi	r26, 0x35	; 53
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e5 e3       	ldi	r30, 0x35	; 53
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	48 2f       	mov	r20, r24
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	02 2e       	mov	r0, r18
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <DIO_u8SetPinValue+0x1c4>
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	0a 94       	dec	r0
    2448:	e2 f7       	brpl	.-8      	; 0x2442 <DIO_u8SetPinValue+0x1c0>
    244a:	80 95       	com	r24
    244c:	84 23       	and	r24, r20
    244e:	8c 93       	st	X, r24
    2450:	38 c0       	rjmp	.+112    	; 0x24c2 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
			    switch(Copy_u8PinValue)
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	3e 83       	std	Y+6, r19	; 0x06
    245a:	2d 83       	std	Y+5, r18	; 0x05
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	c9 f0       	breq	.+50     	; 0x2496 <DIO_u8SetPinValue+0x214>
    2464:	2d 81       	ldd	r18, Y+5	; 0x05
    2466:	3e 81       	ldd	r19, Y+6	; 0x06
    2468:	21 30       	cpi	r18, 0x01	; 1
    246a:	31 05       	cpc	r19, r1
    246c:	51 f5       	brne	.+84     	; 0x24c2 <DIO_u8SetPinValue+0x240>
				{
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    246e:	a2 e3       	ldi	r26, 0x32	; 50
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e2 e3       	ldi	r30, 0x32	; 50
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	48 2f       	mov	r20, r24
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 2e       	mov	r0, r18
    2486:	02 c0       	rjmp	.+4      	; 0x248c <DIO_u8SetPinValue+0x20a>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <DIO_u8SetPinValue+0x206>
    2490:	84 2b       	or	r24, r20
    2492:	8c 93       	st	X, r24
    2494:	16 c0       	rjmp	.+44     	; 0x24c2 <DIO_u8SetPinValue+0x240>
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    2496:	a2 e3       	ldi	r26, 0x32	; 50
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e2 e3       	ldi	r30, 0x32	; 50
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <DIO_u8SetPinValue+0x232>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <DIO_u8SetPinValue+0x22e>
    24b8:	80 95       	com	r24
    24ba:	84 23       	and	r24, r20
    24bc:	8c 93       	st	X, r24
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <DIO_u8SetPinValue+0x240>
			
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    24c0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    24c4:	2e 96       	adiw	r28, 0x0e	; 14
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <DIO_u8GetPinValue>:

   /*if pin is input read value(0v or 5v)*/
u8 DIO_u8GetPinValue (u8 Copy_u8PortId, u8 Copy_u8PinId , u8 * Copy_pu8ReturnedPinValue){
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	28 97       	sbiw	r28, 0x08	; 8
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	8b 83       	std	Y+3, r24	; 0x03
    24ec:	6c 83       	std	Y+4, r22	; 0x04
    24ee:	5e 83       	std	Y+6, r21	; 0x06
    24f0:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD)&& (Copy_u8PinId <= DIO_u8_PIN7)&& (Copy_pu8ReturnedPinValue != NULL))
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	84 30       	cpi	r24, 0x04	; 4
    24fa:	08 f0       	brcs	.+2      	; 0x24fe <DIO_u8GetPinValue+0x28>
    24fc:	9f c0       	rjmp	.+318    	; 0x263c <DIO_u8GetPinValue+0x166>
    24fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2500:	88 30       	cpi	r24, 0x08	; 8
    2502:	08 f0       	brcs	.+2      	; 0x2506 <DIO_u8GetPinValue+0x30>
    2504:	9b c0       	rjmp	.+310    	; 0x263c <DIO_u8GetPinValue+0x166>
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	09 f4       	brne	.+2      	; 0x2510 <DIO_u8GetPinValue+0x3a>
    250e:	96 c0       	rjmp	.+300    	; 0x263c <DIO_u8GetPinValue+0x166>
	{
		switch(Copy_u8PortId)
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	38 87       	std	Y+8, r19	; 0x08
    2518:	2f 83       	std	Y+7, r18	; 0x07
    251a:	4f 81       	ldd	r20, Y+7	; 0x07
    251c:	58 85       	ldd	r21, Y+8	; 0x08
    251e:	41 30       	cpi	r20, 0x01	; 1
    2520:	51 05       	cpc	r21, r1
    2522:	a9 f1       	breq	.+106    	; 0x258e <DIO_u8GetPinValue+0xb8>
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	98 85       	ldd	r25, Y+8	; 0x08
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	91 05       	cpc	r25, r1
    252c:	34 f4       	brge	.+12     	; 0x253a <DIO_u8GetPinValue+0x64>
    252e:	2f 81       	ldd	r18, Y+7	; 0x07
    2530:	38 85       	ldd	r19, Y+8	; 0x08
    2532:	21 15       	cp	r18, r1
    2534:	31 05       	cpc	r19, r1
    2536:	71 f0       	breq	.+28     	; 0x2554 <DIO_u8GetPinValue+0x7e>
    2538:	82 c0       	rjmp	.+260    	; 0x263e <DIO_u8GetPinValue+0x168>
    253a:	4f 81       	ldd	r20, Y+7	; 0x07
    253c:	58 85       	ldd	r21, Y+8	; 0x08
    253e:	42 30       	cpi	r20, 0x02	; 2
    2540:	51 05       	cpc	r21, r1
    2542:	09 f4       	brne	.+2      	; 0x2546 <DIO_u8GetPinValue+0x70>
    2544:	41 c0       	rjmp	.+130    	; 0x25c8 <DIO_u8GetPinValue+0xf2>
    2546:	8f 81       	ldd	r24, Y+7	; 0x07
    2548:	98 85       	ldd	r25, Y+8	; 0x08
    254a:	83 30       	cpi	r24, 0x03	; 3
    254c:	91 05       	cpc	r25, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <DIO_u8GetPinValue+0x7c>
    2550:	58 c0       	rjmp	.+176    	; 0x2602 <DIO_u8GetPinValue+0x12c>
    2552:	75 c0       	rjmp	.+234    	; 0x263e <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    2554:	e9 e3       	ldi	r30, 0x39	; 57
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	8c 81       	ldd	r24, Y+4	; 0x04
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a9 01       	movw	r20, r18
    2566:	02 c0       	rjmp	.+4      	; 0x256c <DIO_u8GetPinValue+0x96>
    2568:	55 95       	asr	r21
    256a:	47 95       	ror	r20
    256c:	8a 95       	dec	r24
    256e:	e2 f7       	brpl	.-8      	; 0x2568 <DIO_u8GetPinValue+0x92>
    2570:	ca 01       	movw	r24, r20
    2572:	81 70       	andi	r24, 0x01	; 1
    2574:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	88 23       	and	r24, r24
    257a:	21 f4       	brne	.+8      	; 0x2584 <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    257c:	ed 81       	ldd	r30, Y+5	; 0x05
    257e:	fe 81       	ldd	r31, Y+6	; 0x06
    2580:	10 82       	st	Z, r1
    2582:	5d c0       	rjmp	.+186    	; 0x263e <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;	
    2584:	ed 81       	ldd	r30, Y+5	; 0x05
    2586:	fe 81       	ldd	r31, Y+6	; 0x06
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	80 83       	st	Z, r24
    258c:	58 c0       	rjmp	.+176    	; 0x263e <DIO_u8GetPinValue+0x168>
			}
		    break;
            case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    258e:	e6 e3       	ldi	r30, 0x36	; 54
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a9 01       	movw	r20, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_u8GetPinValue+0xd0>
    25a2:	55 95       	asr	r21
    25a4:	47 95       	ror	r20
    25a6:	8a 95       	dec	r24
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_u8GetPinValue+0xcc>
    25aa:	ca 01       	movw	r24, r20
    25ac:	81 70       	andi	r24, 0x01	; 1
    25ae:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	88 23       	and	r24, r24
    25b4:	21 f4       	brne	.+8      	; 0x25be <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    25b6:	ed 81       	ldd	r30, Y+5	; 0x05
    25b8:	fe 81       	ldd	r31, Y+6	; 0x06
    25ba:	10 82       	st	Z, r1
    25bc:	40 c0       	rjmp	.+128    	; 0x263e <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;	
    25be:	ed 81       	ldd	r30, Y+5	; 0x05
    25c0:	fe 81       	ldd	r31, Y+6	; 0x06
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 83       	st	Z, r24
    25c6:	3b c0       	rjmp	.+118    	; 0x263e <DIO_u8GetPinValue+0x168>
			}
		    break;
			case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    25c8:	e3 e3       	ldi	r30, 0x33	; 51
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	a9 01       	movw	r20, r18
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <DIO_u8GetPinValue+0x10a>
    25dc:	55 95       	asr	r21
    25de:	47 95       	ror	r20
    25e0:	8a 95       	dec	r24
    25e2:	e2 f7       	brpl	.-8      	; 0x25dc <DIO_u8GetPinValue+0x106>
    25e4:	ca 01       	movw	r24, r20
    25e6:	81 70       	andi	r24, 0x01	; 1
    25e8:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	88 23       	and	r24, r24
    25ee:	21 f4       	brne	.+8      	; 0x25f8 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    25f0:	ed 81       	ldd	r30, Y+5	; 0x05
    25f2:	fe 81       	ldd	r31, Y+6	; 0x06
    25f4:	10 82       	st	Z, r1
    25f6:	23 c0       	rjmp	.+70     	; 0x263e <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;	
    25f8:	ed 81       	ldd	r30, Y+5	; 0x05
    25fa:	fe 81       	ldd	r31, Y+6	; 0x06
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	1e c0       	rjmp	.+60     	; 0x263e <DIO_u8GetPinValue+0x168>
			}
		    break;
			case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    2602:	e0 e3       	ldi	r30, 0x30	; 48
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	88 2f       	mov	r24, r24
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a9 01       	movw	r20, r18
    2614:	02 c0       	rjmp	.+4      	; 0x261a <DIO_u8GetPinValue+0x144>
    2616:	55 95       	asr	r21
    2618:	47 95       	ror	r20
    261a:	8a 95       	dec	r24
    261c:	e2 f7       	brpl	.-8      	; 0x2616 <DIO_u8GetPinValue+0x140>
    261e:	ca 01       	movw	r24, r20
    2620:	81 70       	andi	r24, 0x01	; 1
    2622:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8PinValue == 0)
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	88 23       	and	r24, r24
    2628:	21 f4       	brne	.+8      	; 0x2632 <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    262a:	ed 81       	ldd	r30, Y+5	; 0x05
    262c:	fe 81       	ldd	r31, Y+6	; 0x06
    262e:	10 82       	st	Z, r1
    2630:	06 c0       	rjmp	.+12     	; 0x263e <DIO_u8GetPinValue+0x168>
			}
			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;	
    2632:	ed 81       	ldd	r30, Y+5	; 0x05
    2634:	fe 81       	ldd	r31, Y+6	; 0x06
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	80 83       	st	Z, r24
    263a:	01 c0       	rjmp	.+2      	; 0x263e <DIO_u8GetPinValue+0x168>
		    break;
		}	
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    263c:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2640:	28 96       	adiw	r28, 0x08	; 8
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <DIO_u8SetPortDirection>:
   /*port direction input or output*/
u8 DIO_u8SetPortDirection (u8 Copy_u8PortId, u8 Copy_u8PortDirection){
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	2d 97       	sbiw	r28, 0x0d	; 13
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	8a 83       	std	Y+2, r24	; 0x02
    2668:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection = DIO_u8_OUTPUT) || (Copy_u8PortDirection = DIO_u8_INPUT))
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	8b 83       	std	Y+3, r24	; 0x03
	{
		switch (Copy_u8PortId)
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3d 87       	std	Y+13, r19	; 0x0d
    267a:	2c 87       	std	Y+12, r18	; 0x0c
    267c:	8c 85       	ldd	r24, Y+12	; 0x0c
    267e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	91 05       	cpc	r25, r1
    2684:	71 f1       	breq	.+92     	; 0x26e2 <DIO_u8SetPortDirection+0x90>
    2686:	2c 85       	ldd	r18, Y+12	; 0x0c
    2688:	3d 85       	ldd	r19, Y+13	; 0x0d
    268a:	22 30       	cpi	r18, 0x02	; 2
    268c:	31 05       	cpc	r19, r1
    268e:	2c f4       	brge	.+10     	; 0x269a <DIO_u8SetPortDirection+0x48>
    2690:	8c 85       	ldd	r24, Y+12	; 0x0c
    2692:	9d 85       	ldd	r25, Y+13	; 0x0d
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f0       	breq	.+26     	; 0x26b2 <DIO_u8SetPortDirection+0x60>
    2698:	69 c0       	rjmp	.+210    	; 0x276c <DIO_u8SetPortDirection+0x11a>
    269a:	2c 85       	ldd	r18, Y+12	; 0x0c
    269c:	3d 85       	ldd	r19, Y+13	; 0x0d
    269e:	22 30       	cpi	r18, 0x02	; 2
    26a0:	31 05       	cpc	r19, r1
    26a2:	b1 f1       	breq	.+108    	; 0x2710 <DIO_u8SetPortDirection+0xbe>
    26a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    26a8:	83 30       	cpi	r24, 0x03	; 3
    26aa:	91 05       	cpc	r25, r1
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <DIO_u8SetPortDirection+0x5e>
    26ae:	47 c0       	rjmp	.+142    	; 0x273e <DIO_u8SetPortDirection+0xec>
    26b0:	5d c0       	rjmp	.+186    	; 0x276c <DIO_u8SetPortDirection+0x11a>
		{
			case DIO_u8_PORTA:
			switch (Copy_u8PortDirection)
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	3b 87       	std	Y+11, r19	; 0x0b
    26ba:	2a 87       	std	Y+10, r18	; 0x0a
    26bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    26be:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	59 f0       	breq	.+22     	; 0x26da <DIO_u8SetPortDirection+0x88>
    26c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    26c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    26c8:	21 30       	cpi	r18, 0x01	; 1
    26ca:	31 05       	cpc	r19, r1
    26cc:	09 f0       	breq	.+2      	; 0x26d0 <DIO_u8SetPortDirection+0x7e>
    26ce:	4f c0       	rjmp	.+158    	; 0x276e <DIO_u8SetPortDirection+0x11c>
			{
				case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xff;break;
    26d0:	ea e3       	ldi	r30, 0x3A	; 58
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	8f ef       	ldi	r24, 0xFF	; 255
    26d6:	80 83       	st	Z, r24
    26d8:	4a c0       	rjmp	.+148    	; 0x276e <DIO_u8SetPortDirection+0x11c>
				case DIO_u8_INPUT :DIO_u8_DDRA_REG = 0x00;break;
    26da:	ea e3       	ldi	r30, 0x3A	; 58
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	10 82       	st	Z, r1
    26e0:	46 c0       	rjmp	.+140    	; 0x276e <DIO_u8SetPortDirection+0x11c>
			}
			break;
			case DIO_u8_PORTB:
			switch (Copy_u8PortDirection)
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	39 87       	std	Y+9, r19	; 0x09
    26ea:	28 87       	std	Y+8, r18	; 0x08
    26ec:	88 85       	ldd	r24, Y+8	; 0x08
    26ee:	99 85       	ldd	r25, Y+9	; 0x09
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	51 f0       	breq	.+20     	; 0x2708 <DIO_u8SetPortDirection+0xb6>
    26f4:	28 85       	ldd	r18, Y+8	; 0x08
    26f6:	39 85       	ldd	r19, Y+9	; 0x09
    26f8:	21 30       	cpi	r18, 0x01	; 1
    26fa:	31 05       	cpc	r19, r1
    26fc:	c1 f5       	brne	.+112    	; 0x276e <DIO_u8SetPortDirection+0x11c>
			{
				case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xff;break;
    26fe:	e7 e3       	ldi	r30, 0x37	; 55
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	80 83       	st	Z, r24
    2706:	33 c0       	rjmp	.+102    	; 0x276e <DIO_u8SetPortDirection+0x11c>
				case DIO_u8_INPUT :DIO_u8_DDRB_REG = 0x00;break;
    2708:	e7 e3       	ldi	r30, 0x37	; 55
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	10 82       	st	Z, r1
    270e:	2f c0       	rjmp	.+94     	; 0x276e <DIO_u8SetPortDirection+0x11c>
			}
			break;
			case DIO_u8_PORTC:
			switch (Copy_u8PortDirection)
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	3f 83       	std	Y+7, r19	; 0x07
    2718:	2e 83       	std	Y+6, r18	; 0x06
    271a:	8e 81       	ldd	r24, Y+6	; 0x06
    271c:	9f 81       	ldd	r25, Y+7	; 0x07
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	51 f0       	breq	.+20     	; 0x2736 <DIO_u8SetPortDirection+0xe4>
    2722:	2e 81       	ldd	r18, Y+6	; 0x06
    2724:	3f 81       	ldd	r19, Y+7	; 0x07
    2726:	21 30       	cpi	r18, 0x01	; 1
    2728:	31 05       	cpc	r19, r1
    272a:	09 f5       	brne	.+66     	; 0x276e <DIO_u8SetPortDirection+0x11c>
			{
				case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xff;break;
    272c:	e4 e3       	ldi	r30, 0x34	; 52
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	80 83       	st	Z, r24
    2734:	1c c0       	rjmp	.+56     	; 0x276e <DIO_u8SetPortDirection+0x11c>
				case DIO_u8_INPUT :DIO_u8_DDRC_REG = 0x00;break;
    2736:	e4 e3       	ldi	r30, 0x34	; 52
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	10 82       	st	Z, r1
    273c:	18 c0       	rjmp	.+48     	; 0x276e <DIO_u8SetPortDirection+0x11c>
			}
			break;
			case DIO_u8_PORTD:
			switch (Copy_u8PortDirection)
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	28 2f       	mov	r18, r24
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	3d 83       	std	Y+5, r19	; 0x05
    2746:	2c 83       	std	Y+4, r18	; 0x04
    2748:	8c 81       	ldd	r24, Y+4	; 0x04
    274a:	9d 81       	ldd	r25, Y+5	; 0x05
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	51 f0       	breq	.+20     	; 0x2764 <DIO_u8SetPortDirection+0x112>
    2750:	2c 81       	ldd	r18, Y+4	; 0x04
    2752:	3d 81       	ldd	r19, Y+5	; 0x05
    2754:	21 30       	cpi	r18, 0x01	; 1
    2756:	31 05       	cpc	r19, r1
    2758:	51 f4       	brne	.+20     	; 0x276e <DIO_u8SetPortDirection+0x11c>
			{
				case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xff;break;
    275a:	e1 e3       	ldi	r30, 0x31	; 49
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	8f ef       	ldi	r24, 0xFF	; 255
    2760:	80 83       	st	Z, r24
    2762:	05 c0       	rjmp	.+10     	; 0x276e <DIO_u8SetPortDirection+0x11c>
				case DIO_u8_INPUT :DIO_u8_DDRD_REG = 0x00;break;
    2764:	e1 e3       	ldi	r30, 0x31	; 49
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	10 82       	st	Z, r1
    276a:	01 c0       	rjmp	.+2      	; 0x276e <DIO_u8SetPortDirection+0x11c>
			}
			break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    276c:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
	}
	return Local_u8ErrorState;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2770:	2d 96       	adiw	r28, 0x0d	; 13
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <DIO_u8SetPortValue>:

    /*if port is output set value(0v or 5v)*/
u8 DIO_u8SetPortValue (u8 Copy_u8PortId, u8 Copy_u8PortValue){
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <DIO_u8SetPortValue+0x6>
    2788:	00 d0       	rcall	.+0      	; 0x278a <DIO_u8SetPortValue+0x8>
    278a:	0f 92       	push	r0
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	8a 83       	std	Y+2, r24	; 0x02
    2792:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortId)
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	3d 83       	std	Y+5, r19	; 0x05
    27a0:	2c 83       	std	Y+4, r18	; 0x04
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	9d 81       	ldd	r25, Y+5	; 0x05
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	91 05       	cpc	r25, r1
    27aa:	d1 f0       	breq	.+52     	; 0x27e0 <DIO_u8SetPortValue+0x5e>
    27ac:	2c 81       	ldd	r18, Y+4	; 0x04
    27ae:	3d 81       	ldd	r19, Y+5	; 0x05
    27b0:	22 30       	cpi	r18, 0x02	; 2
    27b2:	31 05       	cpc	r19, r1
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <DIO_u8SetPortValue+0x3e>
    27b6:	8c 81       	ldd	r24, Y+4	; 0x04
    27b8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	61 f0       	breq	.+24     	; 0x27d6 <DIO_u8SetPortValue+0x54>
    27be:	1f c0       	rjmp	.+62     	; 0x27fe <DIO_u8SetPortValue+0x7c>
    27c0:	2c 81       	ldd	r18, Y+4	; 0x04
    27c2:	3d 81       	ldd	r19, Y+5	; 0x05
    27c4:	22 30       	cpi	r18, 0x02	; 2
    27c6:	31 05       	cpc	r19, r1
    27c8:	81 f0       	breq	.+32     	; 0x27ea <DIO_u8SetPortValue+0x68>
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	9d 81       	ldd	r25, Y+5	; 0x05
    27ce:	83 30       	cpi	r24, 0x03	; 3
    27d0:	91 05       	cpc	r25, r1
    27d2:	81 f0       	breq	.+32     	; 0x27f4 <DIO_u8SetPortValue+0x72>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    27d6:	eb e3       	ldi	r30, 0x3B	; 59
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	80 83       	st	Z, r24
    27de:	10 c0       	rjmp	.+32     	; 0x2800 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    27e0:	e8 e3       	ldi	r30, 0x38	; 56
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	80 83       	st	Z, r24
    27e8:	0b c0       	rjmp	.+22     	; 0x2800 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    27ea:	e5 e3       	ldi	r30, 0x35	; 53
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	80 83       	st	Z, r24
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    27f4:	e2 e3       	ldi	r30, 0x32	; 50
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	80 83       	st	Z, r24
    27fc:	01 c0       	rjmp	.+2      	; 0x2800 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = STD_TYPES_NOK;
    27fe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2800:	89 81       	ldd	r24, Y+1	; 0x01
}      
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <DIO_u8GetPortValue>:
 
 /* if port is input read value(0v or 5v)*/
u8 DIO_u8GetPortValue (u8 Copy_u8PortId, u8 * Copy_pu8ReturnedPortValue){
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	00 d0       	rcall	.+0      	; 0x2818 <DIO_u8GetPortValue+0x6>
    2818:	00 d0       	rcall	.+0      	; 0x281a <DIO_u8GetPortValue+0x8>
    281a:	00 d0       	rcall	.+0      	; 0x281c <DIO_u8GetPortValue+0xa>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	7c 83       	std	Y+4, r23	; 0x04
    2824:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	e9 f1       	breq	.+122    	; 0x28ac <DIO_u8GetPortValue+0x9a>
	{
		switch (Copy_u8PortId)
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	3e 83       	std	Y+6, r19	; 0x06
    283a:	2d 83       	std	Y+5, r18	; 0x05
    283c:	8d 81       	ldd	r24, Y+5	; 0x05
    283e:	9e 81       	ldd	r25, Y+6	; 0x06
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	91 05       	cpc	r25, r1
    2844:	e1 f0       	breq	.+56     	; 0x287e <DIO_u8GetPortValue+0x6c>
    2846:	2d 81       	ldd	r18, Y+5	; 0x05
    2848:	3e 81       	ldd	r19, Y+6	; 0x06
    284a:	22 30       	cpi	r18, 0x02	; 2
    284c:	31 05       	cpc	r19, r1
    284e:	2c f4       	brge	.+10     	; 0x285a <DIO_u8GetPortValue+0x48>
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	61 f0       	breq	.+24     	; 0x2870 <DIO_u8GetPortValue+0x5e>
    2858:	27 c0       	rjmp	.+78     	; 0x28a8 <DIO_u8GetPortValue+0x96>
    285a:	2d 81       	ldd	r18, Y+5	; 0x05
    285c:	3e 81       	ldd	r19, Y+6	; 0x06
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	a1 f0       	breq	.+40     	; 0x288c <DIO_u8GetPortValue+0x7a>
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	91 05       	cpc	r25, r1
    286c:	b1 f0       	breq	.+44     	; 0x289a <DIO_u8GetPortValue+0x88>
    286e:	1c c0       	rjmp	.+56     	; 0x28a8 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: * Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    2870:	e9 e3       	ldi	r30, 0x39	; 57
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	eb 81       	ldd	r30, Y+3	; 0x03
    2878:	fc 81       	ldd	r31, Y+4	; 0x04
    287a:	80 83       	st	Z, r24
    287c:	18 c0       	rjmp	.+48     	; 0x28ae <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: * Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    287e:	e6 e3       	ldi	r30, 0x36	; 54
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	eb 81       	ldd	r30, Y+3	; 0x03
    2886:	fc 81       	ldd	r31, Y+4	; 0x04
    2888:	80 83       	st	Z, r24
    288a:	11 c0       	rjmp	.+34     	; 0x28ae <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: * Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    288c:	e3 e3       	ldi	r30, 0x33	; 51
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	eb 81       	ldd	r30, Y+3	; 0x03
    2894:	fc 81       	ldd	r31, Y+4	; 0x04
    2896:	80 83       	st	Z, r24
    2898:	0a c0       	rjmp	.+20     	; 0x28ae <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: * Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    289a:	e0 e3       	ldi	r30, 0x30	; 48
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	eb 81       	ldd	r30, Y+3	; 0x03
    28a2:	fc 81       	ldd	r31, Y+4	; 0x04
    28a4:	80 83       	st	Z, r24
    28a6:	03 c0       	rjmp	.+6      	; 0x28ae <DIO_u8GetPortValue+0x9c>
			default : Local_u8ErrorState = STD_TYPES_NOK;
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    28ac:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b0:	26 96       	adiw	r28, 0x06	; 6
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <__udivmodqi4>:
    28c2:	99 1b       	sub	r25, r25
    28c4:	79 e0       	ldi	r23, 0x09	; 9
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <__udivmodqi4_ep>

000028c8 <__udivmodqi4_loop>:
    28c8:	99 1f       	adc	r25, r25
    28ca:	96 17       	cp	r25, r22
    28cc:	08 f0       	brcs	.+2      	; 0x28d0 <__udivmodqi4_ep>
    28ce:	96 1b       	sub	r25, r22

000028d0 <__udivmodqi4_ep>:
    28d0:	88 1f       	adc	r24, r24
    28d2:	7a 95       	dec	r23
    28d4:	c9 f7       	brne	.-14     	; 0x28c8 <__udivmodqi4_loop>
    28d6:	80 95       	com	r24
    28d8:	08 95       	ret

000028da <__udivmodsi4>:
    28da:	a1 e2       	ldi	r26, 0x21	; 33
    28dc:	1a 2e       	mov	r1, r26
    28de:	aa 1b       	sub	r26, r26
    28e0:	bb 1b       	sub	r27, r27
    28e2:	fd 01       	movw	r30, r26
    28e4:	0d c0       	rjmp	.+26     	; 0x2900 <__udivmodsi4_ep>

000028e6 <__udivmodsi4_loop>:
    28e6:	aa 1f       	adc	r26, r26
    28e8:	bb 1f       	adc	r27, r27
    28ea:	ee 1f       	adc	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	a2 17       	cp	r26, r18
    28f0:	b3 07       	cpc	r27, r19
    28f2:	e4 07       	cpc	r30, r20
    28f4:	f5 07       	cpc	r31, r21
    28f6:	20 f0       	brcs	.+8      	; 0x2900 <__udivmodsi4_ep>
    28f8:	a2 1b       	sub	r26, r18
    28fa:	b3 0b       	sbc	r27, r19
    28fc:	e4 0b       	sbc	r30, r20
    28fe:	f5 0b       	sbc	r31, r21

00002900 <__udivmodsi4_ep>:
    2900:	66 1f       	adc	r22, r22
    2902:	77 1f       	adc	r23, r23
    2904:	88 1f       	adc	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	1a 94       	dec	r1
    290a:	69 f7       	brne	.-38     	; 0x28e6 <__udivmodsi4_loop>
    290c:	60 95       	com	r22
    290e:	70 95       	com	r23
    2910:	80 95       	com	r24
    2912:	90 95       	com	r25
    2914:	9b 01       	movw	r18, r22
    2916:	ac 01       	movw	r20, r24
    2918:	bd 01       	movw	r22, r26
    291a:	cf 01       	movw	r24, r30
    291c:	08 95       	ret

0000291e <__prologue_saves__>:
    291e:	2f 92       	push	r2
    2920:	3f 92       	push	r3
    2922:	4f 92       	push	r4
    2924:	5f 92       	push	r5
    2926:	6f 92       	push	r6
    2928:	7f 92       	push	r7
    292a:	8f 92       	push	r8
    292c:	9f 92       	push	r9
    292e:	af 92       	push	r10
    2930:	bf 92       	push	r11
    2932:	cf 92       	push	r12
    2934:	df 92       	push	r13
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	ca 1b       	sub	r28, r26
    2948:	db 0b       	sbc	r29, r27
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	09 94       	ijmp

00002956 <__epilogue_restores__>:
    2956:	2a 88       	ldd	r2, Y+18	; 0x12
    2958:	39 88       	ldd	r3, Y+17	; 0x11
    295a:	48 88       	ldd	r4, Y+16	; 0x10
    295c:	5f 84       	ldd	r5, Y+15	; 0x0f
    295e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2960:	7d 84       	ldd	r7, Y+13	; 0x0d
    2962:	8c 84       	ldd	r8, Y+12	; 0x0c
    2964:	9b 84       	ldd	r9, Y+11	; 0x0b
    2966:	aa 84       	ldd	r10, Y+10	; 0x0a
    2968:	b9 84       	ldd	r11, Y+9	; 0x09
    296a:	c8 84       	ldd	r12, Y+8	; 0x08
    296c:	df 80       	ldd	r13, Y+7	; 0x07
    296e:	ee 80       	ldd	r14, Y+6	; 0x06
    2970:	fd 80       	ldd	r15, Y+5	; 0x05
    2972:	0c 81       	ldd	r16, Y+4	; 0x04
    2974:	1b 81       	ldd	r17, Y+3	; 0x03
    2976:	aa 81       	ldd	r26, Y+2	; 0x02
    2978:	b9 81       	ldd	r27, Y+1	; 0x01
    297a:	ce 0f       	add	r28, r30
    297c:	d1 1d       	adc	r29, r1
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	de bf       	out	0x3e, r29	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	cd bf       	out	0x3d, r28	; 61
    2988:	ed 01       	movw	r28, r26
    298a:	08 95       	ret

0000298c <memset>:
    298c:	dc 01       	movw	r26, r24
    298e:	01 c0       	rjmp	.+2      	; 0x2992 <memset+0x6>
    2990:	6d 93       	st	X+, r22
    2992:	41 50       	subi	r20, 0x01	; 1
    2994:	50 40       	sbci	r21, 0x00	; 0
    2996:	e0 f7       	brcc	.-8      	; 0x2990 <memset+0x4>
    2998:	08 95       	ret

0000299a <strcmp>:
    299a:	fb 01       	movw	r30, r22
    299c:	dc 01       	movw	r26, r24
    299e:	8d 91       	ld	r24, X+
    29a0:	01 90       	ld	r0, Z+
    29a2:	80 19       	sub	r24, r0
    29a4:	01 10       	cpse	r0, r1
    29a6:	d9 f3       	breq	.-10     	; 0x299e <strcmp+0x4>
    29a8:	99 0b       	sbc	r25, r25
    29aa:	08 95       	ret

000029ac <_exit>:
    29ac:	f8 94       	cli

000029ae <__stop_program>:
    29ae:	ff cf       	rjmp	.-2      	; 0x29ae <__stop_program>
